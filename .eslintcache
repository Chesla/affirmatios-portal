[{"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/index.js":"1","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/App.js":"2","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/reportWebVitals.js":"3","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/homePage.js":"4","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/login.js":"5","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/header.js":"6","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/constants.js":"7","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/reducers/index.js":"8","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/reducers/userReducer.js":"9","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/actions/index.js":"10","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/history.js":"11","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/actions/userAction.jsx":"12","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/profile.js":"13","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/reducers/credentialReducer.js":"14","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/credentials.js":"15","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/actions/credentialAction.jsx":"16","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/reducers/notificationReducer.js":"17","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/notifications.js":"18","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/actions/notificationActions.jsx":"19","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/certificate.js":"20","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/experience.js":"21","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/covid.js":"22","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/degree.js":"23","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/connections.js":"24","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/actions/connectionAction.js":"25","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/reducers/connectionReducer.js":"26","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/issueCredentials.js":"27","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/degreeForm.js":"28","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/covidForm.js":"29","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/experienceForm.js":"30","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/RequestCredentials.js":"31","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/requestCredentials.js":"32","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/requestNewCredentials.js":"33"},{"size":456,"mtime":1610678442011,"results":"34","hashOfConfig":"35"},{"size":1502,"mtime":1610877769159,"results":"36","hashOfConfig":"35"},{"size":362,"mtime":1610603389125,"results":"37","hashOfConfig":"35"},{"size":1266,"mtime":1610965381297,"results":"38","hashOfConfig":"35"},{"size":7573,"mtime":1610983196479,"results":"39","hashOfConfig":"35"},{"size":4187,"mtime":1610965378098,"results":"40","hashOfConfig":"35"},{"size":4840,"mtime":1610990222495,"results":"41","hashOfConfig":"35"},{"size":413,"mtime":1610730660161,"results":"42","hashOfConfig":"35"},{"size":1176,"mtime":1610862997354,"results":"43","hashOfConfig":"35"},{"size":997,"mtime":1610987128190,"results":"44","hashOfConfig":"35"},{"size":110,"mtime":1610633072618,"results":"45","hashOfConfig":"35"},{"size":2608,"mtime":1610984254832,"results":"46","hashOfConfig":"35"},{"size":5175,"mtime":1610984265490,"results":"47","hashOfConfig":"35"},{"size":2184,"mtime":1610962217745,"results":"48","hashOfConfig":"35"},{"size":5131,"mtime":1610962854627,"results":"49","hashOfConfig":"35"},{"size":8449,"mtime":1610971594674,"results":"50","hashOfConfig":"35"},{"size":912,"mtime":1610693269209,"results":"51","hashOfConfig":"35"},{"size":5654,"mtime":1610877593981,"results":"52","hashOfConfig":"35"},{"size":4791,"mtime":1610693256984,"results":"53","hashOfConfig":"35"},{"size":2198,"mtime":1610963777733,"results":"54","hashOfConfig":"35"},{"size":7267,"mtime":1610964444312,"results":"55","hashOfConfig":"35"},{"size":3793,"mtime":1610965127148,"results":"56","hashOfConfig":"35"},{"size":4257,"mtime":1610964255762,"results":"57","hashOfConfig":"35"},{"size":15200,"mtime":1610990766949,"results":"58","hashOfConfig":"35"},{"size":4818,"mtime":1610987148286,"results":"59","hashOfConfig":"35"},{"size":1906,"mtime":1610987349522,"results":"60","hashOfConfig":"35"},{"size":8165,"mtime":1610987873398,"results":"61","hashOfConfig":"35"},{"size":11157,"mtime":1610878348718,"results":"62","hashOfConfig":"35"},{"size":10898,"mtime":1610876556937,"results":"63","hashOfConfig":"35"},{"size":15974,"mtime":1610876554994,"results":"64","hashOfConfig":"35"},{"size":7694,"mtime":1610964636003,"results":"65","hashOfConfig":"35"},{"size":7694,"mtime":1610964636003,"results":"66","hashOfConfig":"35"},{"size":9291,"mtime":1610971572998,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1s3r6g",{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"70"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"70"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"70"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"70"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"70"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"70"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"70"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"70"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"70"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"70"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"144"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"70"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"70"},"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/index.js",[],["151","152"],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/App.js",["153"],"// import logo from './logo.svg';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport thunk from \"redux-thunk\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport rootReducer from \"./reducers\";\nimport './App.css';\nimport HomePage from \"./components/homePage\";\nimport Login from \"./components/login\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport {theme} from \"./constants\";\nimport history from \"./history\";\nconst initialState = window.__WML_REDUX_INITIAL_STATE__;\nconst store = createStore(rootReducer, initialState, applyMiddleware(thunk));\nconst checkAuth = () => {\n  const username = localStorage.getItem(\"username\");\n  const password = localStorage.getItem(\"password\");\n  const pathName = window.location.pathname;\n  if(!pathName.includes(\"login\") && !pathName.includes(\"registration\")){\n    if(!username || !password){\n      history.push(\"/login\");\n    }\n  }\n}\nfunction App() {\n  return (\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <div className=\"App\">\n          <Router history={history}>\n              <Switch>\n                <Route exact path=\"/login\" component={Login} />\n                <Route exact path=\"/registration\" component={Login} />\n                <Route path=\"/\" component={HomePage} />\n              </Switch>\n            </Router>\n        </div>\n        </ThemeProvider>\n    </Provider>\n\n  );\n}\n\nexport default App;\ncheckAuth();\n","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/reportWebVitals.js",[],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/homePage.js",[],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/login.js",["154","155"],"/* eslint-disable complexity */\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { Alert } from \"@material-ui/lab\";\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Grid,\n  TextField,\n  CircularProgress,\n  Button,\n} from \"@material-ui/core\";\nimport {\n  loginUser,\n  loader,\n  initLoginData\n} from \"../actions/userAction\";\n\nconst usernameregex = /^(?=[a-zA-Z0-9._]{2,25}$)(?!.*[_.]{2})[^_.].*[^_.]$/;\nconst Login = (props) => {\n  const dispatch = useDispatch();\n  const loginType = props.location.pathname.includes(\"login\") ? \"login\" : \"register\";\n  const [itemData, setItemData] = useState({\n    username: \"\",\n    password: \"\",\n    firstLastName: \"\",\n  });\n  const [itemDataError, setItemDataError] = useState({\n    username: false,\n    password: false,\n    firstLastName: false\n  });\n  const showLoader = useSelector(\n    (state) => state.user.loader\n  );\n  const failureMessage = useSelector(\n    (state) => state.user.loginFailureMessage\n  );\n  const loginSuccess = useSelector(\n    (state) => state.user.loginSuccess\n  );\n  const saveInfo = (e) => {\n    if (e.target.value.trim() === \"\") {\n      setItemData({ ...itemData, ...{ [e.target.name]: e.target.value } });\n      setItemDataError({ ...itemDataError, ...{ [e.target.name]: true } });\n    }\n    if (e.target.name === \"username\" || e.target.name === \"firstLastName\") {\n      setItemData({ ...itemData, ...{ [e.target.name]: e.target.value } });\n      if (e.target.value.match(usernameregex)) {\n        setItemDataError({ ...itemDataError, ...{ [e.target.name]: false } });\n      } else {\n        setItemDataError({ ...itemDataError, ...{ [e.target.name]: true } });\n      }\n    }\n    else{\n      if (e.target.value.trim() !== \"\"){\n        setItemData({ ...itemData, ...{ [e.target.name]: e.target.value } });\n        setItemDataError({ ...itemDataError, ...{ [e.target.name]: false } });\n      }\n    }\n  };\n  const login = () => {\n    if(loginType!==\"login\"){\n      if(!itemData.username || !itemData.password || itemDataError.username || itemDataError.password\n        || !itemData.firstLastName || itemDataError.firstLastName){\n        let errorObj  = {\n            ...itemDataError,\n            username: !itemData.username || itemDataError.username ,\n            password: !itemData.password || itemDataError.password,\n            firstLastName: !itemData.firstLastName || itemDataError.firstLastName\n        }\n        setItemDataError(errorObj);\n      }\n    }\n    else if(!itemData.username || !itemData.password || itemDataError.username || itemDataError.password){\n      let errorObj  = {\n          ...itemDataError,\n          username: !itemData.username || itemDataError.username ,\n          password: !itemData.password || itemDataError.password,\n          firstLastName: !itemData.firstLastName\n      }\n      setItemDataError(errorObj);\n    }else{\n      let param = {\n        username: itemData.username,\n        password: itemData.password,\n      };\n      if(loginType!==\"login\"){\n        param[\"name\"] = itemData.firstLastName;\n      }\n      dispatch(loader(true));\n      dispatch(loginUser(param , loginType));\n    }\n  }\n  useEffect(()=>{\n    if(loginSuccess){\n      props.history.push(\"/\");\n    }\n  },[loginSuccess])\n  useEffect(()=>{\n    dispatch(initLoginData());\n    setItemData({\n      username: \"\",\n      password: \"\",\n      firstLastName: \"\"\n    });\n    setItemDataError({\n      username: \"\",\n      password: \"\",\n      firstLastName: \"\"\n    })\n  },[props.location.pathname]);\n  const portalFor = () => {\n    let type = process.env.REACT_APP_AGENT?.toLowerCase();\n    switch(type){\n            case \"medical\" : return \"Medical\";\n            case \"school\" : return \"School\";\n            case \"business\" : return \"Business\";\n            default : return null;\n    }\n  }\n  return (\n    <div className=\"login-page\">\n      \n      <div className=\"login-box\">\n        <div>\n          <div>\n\n          </div>\n          <div>\n            <h1>AFFIRMATIO</h1>\n            {portalFor() ? <h2>{`for ${portalFor()}`}</h2> : null }\n          </div>\n        </div>\n        \n        {showLoader ? (\n          <div className={\"loader-parent\"}>\n            <div className={\"loader-container\"}>\n              <CircularProgress size={50} left={0} top={0} />\n            </div>\n          </div>\n        ) : null}\n        \n        <Card className={\"mgTop10\"}>\n          <CardHeader className={\"mgleft10\"} title={loginType===\"login\" ? \"Sign in\" : \"Register\"}/>\n          <CardContent>\n            <Grid\n              style={{ width: \"320px\", margin: \"0 auto\" }}\n              container\n              alignItems={\"center\"}\n              spacing={2}\n            >\n              <Grid item xs={12} md={12}>\n                <TextField\n                  label=\"User Name\"\n                  id=\"username\"\n                  name=\"username\"\n                  value={itemData.username}\n                  error={itemDataError.username}\n                  helperText={\n                    itemDataError.username\n                      ? \"Please enter a valid user name.\"\n                      : \"User name is the DID provided by government.\"\n                  }\n                  variant=\"outlined\"\n                  onChange={saveInfo}\n                />\n              </Grid>\n              {loginType!==\"login\" ?\n                <Grid item xs={12} md={12}>\n                  <TextField\n                    label=\"First Name and Last Name\"\n                    type=\"text\"\n                    id=\"firstLastName\"\n                    name=\"firstLastName\"\n                    value={itemData.firstLastName}\n                    error={itemDataError.firstLastName}\n                    helperText={\n                      itemDataError.firstLastName ? \"Please enter a name.\" : \"\"\n                    }\n                    variant=\"outlined\"\n                    onChange={saveInfo}\n                  />\n                </Grid>\n                :null\n              }\n              <Grid item xs={12} md={12}>\n                <TextField\n                  label=\"Password\"\n                  type=\"password\"\n                  id=\"password\"\n                  name=\"password\"\n                  value={itemData.password}\n                  error={itemDataError.password}\n                  helperText={\n                    itemDataError.password ? \"Please enter a password.\" : \"\"\n                  }\n                  variant=\"outlined\"\n                  onChange={saveInfo}\n                />\n              </Grid>\n              \n              <Grid item xs={12} md={12}>\n                <Button\n                  variant=\"contained\"\n                  className=\"full-width\"\n                  onClick={login}\n                >\n                  {loginType===\"login\" ? \"LOGIN\" : \"REGISTER\"}\n                </Button>\n              </Grid>\n              <Grid item xs={12} md={12}>\n                {failureMessage && <Alert severity=\"error\">{failureMessage}</Alert>}\n              </Grid>\n              {loginType===\"login\" ?\n              <Grid item xs={12} md={12}>\n                New to Affirmatio? \n                <Link to=\"/registration\" className=\"join-now\">Join Now</Link> \n              </Grid>\n              :\n              <Grid item xs={12} md={12}>\n                Already in Affirmatio? \n                <Link to=\"/login\" className=\"join-now\">Sign in</Link> \n              </Grid>\n                }\n            </Grid>\n            \n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/header.js",["156","157","158","159"],"/* eslint-disable complexity */\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport { theme } from \"../constants\";\nimport { Typography, CssBaseline, Box, Container } from \"@material-ui/core\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport LocalHospitalIcon from '@material-ui/icons/LocalHospital';\nimport SchoolIcon from '@material-ui/icons/School';\nimport BusinessIcon from '@material-ui/icons/Business';\n\nconst Header = (props) => {\n  const portalFor = () => {\n    let type = process.env.REACT_APP_AGENT?.toLowerCase();\n    switch(type){\n            case \"medical\" : return \"secondary\";\n            case \"school\" : return \"primary\";\n            case \"business\" : return \"default\";\n            default : return \"inherit\";\n    }\n  }\n  const portalHeaderFor = () => {\n    let type = process.env.REACT_APP_AGENT?.toLowerCase();\n    switch(type){\n            case \"medical\" : return (<div className={\"app-header-text\"}>\n                                        <span>{setProfilePic()}</span> Medical\n                                     </div>);\n            case \"school\" : return (<div className={\"app-header-text\"}>\n                                        <span>{setProfilePic()}</span> School\n                                    </div>);\n            case \"business\" : return (<div className={\"app-header-text\"}>\n                                        <span>{setProfilePic()}</span> Business\n                                    </div>);\n            default : return \"Affirmatios\";\n    }\n  }\n  const setProfilePic = () => {\n    let type = process.env.REACT_APP_AGENT?.toLowerCase();\n      switch(type){\n        case \"medical\" : return <LocalHospitalIcon style={{ fontSize: 60 }}/>\n        case \"school\" : return <SchoolIcon style={{ fontSize: 60 }}/>\n        case \"business\" : return <BusinessIcon style={{ fontSize: 60 }}/>\n        default : return null;\n      }\n  }\n  const setProfileName = () => {\n    let type = process.env.REACT_APP_AGENT?.toLowerCase();\n      switch(type){\n        case \"medical\" : return \"Manipal Hospitals\"\n        case \"school\" : return \"KIIT University\"\n        case \"business\" : return \"TCS\"\n        default : return <AccountCircle />;\n      }\n  }\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <AppBar position=\"static\" color={portalFor()}>\n        <Toolbar>\n          <Link to=\"/\" className=\"nav-bar-items\">\n            <Typography variant=\"h5\">{portalHeaderFor()}</Typography>\n          </Link>\n          <Link to=\"/connections\" className=\"nav-bar-items\">\n            <Typography variant=\"h6\">Connections</Typography>\n          </Link>\n          {process.env.REACT_APP_AGENT?.toLowerCase() === \"people\" ? (\n            <Link to=\"/credentails\" className=\"nav-bar-items\">\n              <Typography variant=\"h6\">Credentials</Typography>\n            </Link>\n          ) : (\n            <Link to=\"/issuecredentails\" className=\"nav-bar-items\">\n              <Typography variant=\"h6\">Issue Credentials</Typography>\n            </Link>\n          )}\n          {process.env.REACT_APP_AGENT?.toLowerCase() !== \"people\" ? (\n            <Link to=\"/requestcredentials\" className=\"nav-bar-items\">\n              <Typography variant=\"h6\">Request Credentials</Typography>\n            </Link>\n          ):\n          null\n          }\n          <Link to=\"/notifications\" className=\"nav-bar-items\">\n            <Typography variant=\"h6\">Notifications</Typography>\n          </Link>\n          <div className=\"user-profile\">\n            <IconButton\n              aria-label=\"account of current user\"\n              aria-controls=\"menu-appbar\"\n              aria-haspopup=\"true\"\n              onClick={() => props.history.push(\"/profile\")}\n              color=\"inherit\"\n            >\n                {setProfileName()}\n            </IconButton>\n          </div>\n        </Toolbar>\n      </AppBar>\n    </ThemeProvider>\n  );\n};\nexport default Header;\n","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/constants.js",["160","161"],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/reducers/index.js",[],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/reducers/userReducer.js",[],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/actions/index.js",[],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/history.js",[],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/actions/userAction.jsx",[],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/profile.js",["162","163","164","165","166"],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/reducers/credentialReducer.js",[],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/credentials.js",["167","168"],"/* eslint-disable complexity */\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Alert } from \"@material-ui/lab\";\nimport {\n    Card,\n    CardHeader,\n    CardContent,\n    Grid,\n    CircularProgress,\n} from \"@material-ui/core\";\nimport LocalHospitalIcon from '@material-ui/icons/LocalHospital';\nimport SchoolIcon from '@material-ui/icons/School';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport {\n  loginUser,\n  loader\n} from \"../actions/userAction\";\nimport {\n    getAllCredentials\n} from \"../actions/credentialAction\";\nconst Credentials = (props) => {\n  const dispatch = useDispatch();\n  const profileInfo = useSelector(\n    (state) => state.user.profileInfo\n  );\n  const certificates = useSelector(\n    (state) => state.credential.certificates\n  );\n  const showLoader = useSelector(\n    (state) => state.user.loader\n  );\n  const errorMessage = useSelector(\n    (state) => state.credential.errorMessage\n  );\n  const login = () => {\n    const username = localStorage.getItem(\"username\");\n    const password = localStorage.getItem(\"password\");\n    if(username && password && Object.keys(profileInfo).length === 0){\n        let param = {\n            username,\n            password,\n        };\n        dispatch(loader(true));\n        dispatch(loginUser(param , \"login\"));\n    }\n  }\n  const fetchAllCredentials = () => {\n    let param = profileInfo.DID;\n    dispatch(loader(true));\n    dispatch(getAllCredentials(param));\n  }\n  useEffect(()=>{\n    if(Object.keys(profileInfo).length === 0){\n        login();\n    }else{\n        fetchAllCredentials();\n    }\n  },[]);\n  useEffect(()=>{\n    if(Object.keys(profileInfo).length !== 0){\n        fetchAllCredentials();\n    }\n  },[profileInfo]);\n  const setProfilePic = (type) => {\n      type = type?.toLowerCase();\n      switch(type){\n        case \"medical\" : return <LocalHospitalIcon style={{ fontSize: 50 }}/>\n        case \"school\" : return <SchoolIcon style={{ fontSize: 50 }}/>\n        case \"business\" : return <BusinessIcon style={{ fontSize: 50 }}/>\n        default : return null;\n      }\n  }\n  const setCertificateType = (type) => {\n    type = type?.toLowerCase();\n    switch(type){\n      case \"medical\" : return \"COVID CERTIFICATE\"\n      case \"school\" : return \"DEGREE CERTIFICATE\"\n      case \"business\" : return \"EXPERIENCE LETTER\"\n      default : return null;\n    }\n  }\n  const showCertificates = () => {\n    return (certificates||[]).map((c)=>{\n        return(\n            <Grid item xs={6} md={4} key={c.id} \n                  onClick={()=>window.open(`/credentails/${c.id}/${c.type}`,'_blank')}>\n                <div className=\"certificate-container\">\n                <Grid\n                    container\n                    spacing={2}\n                    alignItems={\"center\"}\n                    >\n                    <Grid item xs={6} md={3}>\n                        <div className=\"image-container\">\n                            {setProfilePic(c.type)}\n                        </div>\n                    </Grid>\n                    <Grid item xs={6} md={9}>\n                        <Grid\n                            container\n                            spacing={2}\n                            alignItems={\"center\"}\n                        >\n                            <Grid item xs={6} md={12}>\n                                <div className=\"certificate-issuer\">\n                                    {c.name}\n                                </div>\n                            </Grid>\n                            <Grid item xs={12} md={12}>\n                                <div className=\"certificate-name\">\n                                    {setCertificateType(c.type)}\n                                </div>\n                            </Grid>\n                            <Grid item xs={12} md={12}>\n                                <div className=\"certificate-issued-on\">\n                                    {`Issued on: ${c.date}`} <div>(MM/DD/YYYY)</div>\n                                </div>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                </div>\n            </Grid>\n        )\n    })\n  }\n  return (\n    <React.Fragment>\n        {showLoader ? (\n        <div className={\"loader-parent\"}>\n            <div className={\"loader-container\"}>\n            <CircularProgress size={50} left={0} top={0} />\n            </div>\n        </div>\n        ) : null}\n        {errorMessage && <Alert severity=\"error\">{errorMessage}</Alert>}\n        <Card className=\"layout-card\">\n          <CardHeader title={\"Certificates\"}/>\n          <CardContent className=\"certificate-grid\">\n          {certificates === null || certificates.length === 0? \n            <div>No Certificates Available.</div>\n            :\n            <Grid\n              container\n              spacing={2}\n              alignItems={\"center\"}\n              justify=\"flex-start\"\n            >\n                {showCertificates()}\n            </Grid>\n          }\n          </CardContent>\n        </Card>\n    </React.Fragment>\n  );\n};\n\nexport default Credentials;\n","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/actions/credentialAction.jsx",["169","170","171","172"],"import * as Actions from \"../actions\";\nexport const getAllCredentials = (data) => {\n  return function (dispatch) {\n    let url = `/api/getAllCredentials/${data}`;\n    dispatch({\n      type: Actions.LOADER,\n      payload:false\n    })\n    let actionType = true;\n    if(actionType){\n      let certificates = [{\n        identity: \"QWETVFF\",\n        id:\"Manipal-1\",\n        name:\"Manipal Hospital\",\n        date:\"12/10/2020\",\n        type:\"Medical\",\n      },\n      {\n        identity: \"QWETVFF\",\n        id:\"KIIT-1\",\n        name:\"KIIT University\",\n        date:\"05/10/2014\",\n        type:\"School\",\n      },\n      {\n        identity: \"QWETVFF\",\n        id:\"TCS-1\",\n        name:\"Tata Consultancy Services\",\n        date:\"10/15/2015\",\n        type:\"Business\",\n      } ]\n      dispatch({\n          type: Actions.GET_ALL_CREDENTIALS,\n          payload: {\n              errorMessage:'',\n              certificates\n          }\n      });\n    }else{\n      dispatch({\n        type:  Actions.GET_ALL_CREDENTIALS,\n        payload: {\n          errorMessage:'Some error occured. Please try again later',\n          certificates:[]\n        }\n      });\n    }\n  }\n//   return async function (dispatch) {\n//     const response = await fetch(url, {\n//       method: \"GET\",\n//       certificates: \"include\",\n//     });\n//     dispatch({\n//       type: Actions.LOADER,\n//       payload:false\n//     })\n//     if (response.status === 200) {\n//         dispatch({\n//             type: Actions.GET_ALL_CREDENTIALS,\n//             payload: {\n//                 errorMessage:'',\n//                 certificates: data.certificates\n//             }\n//         });\n//     } else {\n//         dispatch({\n//             type:  Actions.GET_ALL_CREDENTIALS,\n//             payload: {\n//               errorMessage:'Some error occured. Please try again later',\n//               certificates:[]\n//             }\n//         });\n//     }\n//   };\n}\nconst credentialsData = (certificateType) => {\n  let data = {};\n  if(certificateType?.toLowerCase() === \"business\"){\n    data = {\n      name: \" Chesla Kar\",\n      gender: \"F\",\n      designation: \" Software Engineer\",\n      department:\" Apple IDC\",\n      doj:\" 06/16/2014\",\n      dol:\" 09/11/2015\",\n      remarks:\"-\",\n      issuedOn:\" 09/14/2015\",\n      issuedBy:\" Ritu Kumar\",\n      issuedByTeam: \" Deputy Head - Human Resources\",\n      reason:\" Resigned\",\n      verificationId: \"TCS/EMP/834930\",\n      ownerName: \"TATA Consultancy Services\",\n      certificateName: \"SERVICE CERTIFICATE\"\n    }\n  }else if(certificateType?.toLowerCase() === \"medical\"){\n    data = {\n      name: \" Chesla\",\n      gender: \"F\",\n      designation: \"\",\n      department:\" TO WHOMSOEVER IT MAY CONCERN\",\n      doj:\" 06/16/2014\",\n      dol:\" 09/11/2015\",\n      remarks:\"501, UKN Espernza, Thubrahalli, Whitefield, Bengaluru, Karnataka, 560066 \",\n      issuedOn:\" 12/14/2020\",\n      issuedBy:\" Ritu Kumar\",\n      issuedByTeam: \" Medical Officer\",\n      location:\" Bengaluru\",\n      reason:\" Resigned\",\n      age:\"27\",\n      verificationId: \"TCS/EMP/834930\",\n      ownerName: \"Manipal Hospital\",\n      certificateName: \"COVID CERTIFICATE\"\n    }\n  } else {\n    data = {\n      name: \" Chesla Kar\",\n      gender: \"F\",\n      designation: \" \",\n      department:\"B.TECH in Computer Science & Engineering\",\n      doj:\" \",\n      dol:\" month of May, 2014 \",\n      remarks:\"-\",\n      issuedOn:\" 26th May 2014\",\n      issuedBy:\" Prachet Bhuyian\",\n      issuedByTeam: \" Registar\",\n      reason:\" Resigned\",\n      location:\" Bhubaneswar\",\n      verificationId: \"1005042\",\n      ownerName: \"KIIT UNIVERSITY\",\n      certificateName: \"PROVISIONAL CERTIFICATE\"\n    }\n  }\n  return data;\n}\nexport const getCertificateDetails = (param, certificateType) => {\n  return function (dispatch) {\n    let url = `/api/getParticluarCredentials/${param}`;\n    dispatch({\n      type: Actions.LOADER,\n      payload:false\n    })\n    let actionType = true;\n    \n    if(actionType){\n      let data = credentialsData(certificateType);\n      dispatch({\n          type: Actions.PARTICLUAR_DETAIL_CREDENTIALS,\n          payload: {\n              errorMessage:'',\n              certificateDetails:data || {}\n          }\n      });\n    }else{\n      dispatch({\n        type:  Actions.PARTICLUAR_DETAIL_CREDENTIALS,\n        payload: {\n          errorMessage:'Some error occured. Please try again later',\n          certificateDetails:{}\n        }\n      });\n    }\n  }\n//   return async function (dispatch) {\n//     const response = await fetch(url, {\n//       method: \"GET\",\n//       certificates: \"include\",\n//     });\n//     dispatch({\n//       type: Actions.LOADER,\n//       payload:false\n//     })\n//     if (response.status === 200) {\n//         dispatch({\n//             type: Actions.GET_ALL_CREDENTIALS,\n//             payload: {\n//                 errorMessage:'',\n//                 certificates: data.certificates\n//             }\n//         });\n//     } else {\n//         dispatch({\n//             type:  Actions.GET_ALL_CREDENTIALS,\n//             payload: {\n//               errorMessage:'Some error occured. Please try again later',\n//               certificates:[]\n//             }\n//         });\n//     }\n//   };\n}\n\nexport const issueCredential = (data,certificateType) => {\n  return function (dispatch) {\n    let url = `/api/issueCredential/${data}`;\n    dispatch({\n      type: Actions.LOADER,\n      payload:false\n    })\n    let actionType = true;\n    if(actionType){\n      let credentialIssuedAlready = true;\n      if(!credentialIssuedAlready){\n        dispatch({\n          type:  Actions.CREDENTIALS_ISSUED,\n          payload:{\n            credentialIssued: true,\n            errorMessage:\"\"\n          }\n        })\n      }else{\n        dispatch({\n          type:  Actions.CREDENTIALS_ALREADY_ISSUED,\n          payload:{\n            credentialIssued: false,\n            credentialIssuedAlready:true,\n            certificateDetails:credentialsData(certificateType),\n            errorMessage:\"\"\n          }\n        })\n      }\n    }else{\n      if(actionType){\n        dispatch({\n          type:  Actions.CREDENTIALS_ISSUED,\n          payload:{\n            credentialIssued: false,\n            errorMessage:\"Some error occured. Please try again later\",\n          }\n        })\n      }\n    }\n  }\n}\n\nexport const initCredentialsDetails = (connectionVerified,errorMessage) => {\n  return {\n    type: Actions.INIT_CREDENTIALS,\n    payload:{\n      certificateDetails: {},\n    }\n  };\n}\nconst partialCredentialsData = (certificateType) => {\n  let data = {};\n  if(certificateType?.toLowerCase() === \"business\"){\n    data = {\n      name: \" Chesla Kar\",\n      designation: \" Software Engineer\",\n      doj:\" 06/16/2014\",\n      dol:\" 09/11/2015\",\n      issuedOn:\" 09/14/2015\",\n      ownerName: \"TATA Consultancy Services\",\n      certificateName: \"SERVICE CERTIFICATE\",\n      type:certificateType,\n      requestedOn: \"10/10/2020\"\n    }\n  }else if(certificateType?.toLowerCase() === \"medical\"){\n    data = {\n      name: \" Chesla\",\n      designation: \"\",\n      department:\" TO WHOMSOEVER IT MAY CONCERN\",\n      issuedOn:\" 12/14/2020\",\n      reason:\"Negative\",\n      ownerName: \"Manipal Hospital\",\n      certificateName: \"COVID CERTIFICATE\",\n      type:certificateType,\n      requestedOn: \"10/11/2020\"\n    }\n  } else {\n    data = {\n      name: \" Chesla Kar\",\n      department:\"B.TECH in Computer Science & Engineering\",\n      dol:\" month of May, 2014 \",\n      issuedOn:\" 26th May 2014\",\n      ownerName: \"KIIT UNIVERSITY\",\n      certificateName: \"PROVISIONAL CERTIFICATE\",\n      type:certificateType,\n      requestedOn: \"11/11/2020\"\n    }\n  }\n  return data;\n}\nexport const getAlreadyRequestedCertificateDetails = (param) => {\n  return function (dispatch) {\n    let url = `/api/requestedCredential/${param}`;\n    dispatch({\n      type: Actions.LOADER,\n      payload:false\n    })\n    let actionType = true;\n    if(actionType){\n        dispatch({\n          type:  Actions.CREDENTIALS_ALREADY_REQUESTED,\n          payload:{\n            certificateAlreadyRequested:[partialCredentialsData(\"business\"),partialCredentialsData(\"medical\")],\n            errorMessage:\"\"\n          }\n        })\n    }else{\n      if(actionType){\n        dispatch({\n          type:  Actions.CREDENTIALS_ALREADY_REQUESTED,\n          payload:{\n            certificateAlreadyRequested: [],\n            errorMessage:\"Some error occured. Please try again later\",\n          }\n        })\n      }\n    }\n  }\n}\n\nexport const requestCredentials = (param) => {\n\n}","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/reducers/notificationReducer.js",[],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/notifications.js",["173","174"],"/* eslint-disable complexity */\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Alert } from \"@material-ui/lab\";\nimport {\n    Card,\n    CardHeader,\n    CardContent,\n    Grid,\n    Button,\n    CircularProgress,\n} from \"@material-ui/core\";\nimport LocalHospitalIcon from '@material-ui/icons/LocalHospital';\nimport SchoolIcon from '@material-ui/icons/School';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport {\n  loginUser,\n  loader\n} from \"../actions/userAction\";\nimport {\n    getAllNotifications,\n    actionOnNotification\n} from \"../actions/notificationActions\";\nconst Notifications = (props) => {\n  const dispatch = useDispatch();\n  const profileInfo = useSelector(\n    (state) => state.user.profileInfo\n  );\n  const notifications = useSelector(\n    (state) => state.notification.notifications\n  );\n  const showLoader = useSelector(\n    (state) => state.user.loader\n  );\n  const errorMessage = useSelector(\n    (state) => state.notification.errorMessage\n  );\n  const login = () => {\n    const username = localStorage.getItem(\"username\");\n    const password = localStorage.getItem(\"password\");\n    if(username && password && Object.keys(profileInfo).length === 0){\n        let param = {\n            username,\n            password,\n        };\n        dispatch(loader(true));\n        dispatch(loginUser(param , \"login\"));\n    }\n  }\n  const fetchAllNotifications = () => {\n    let param = profileInfo.DID;\n    dispatch(loader(true));\n    dispatch(getAllNotifications(param));\n  }\n  useEffect(()=>{\n    if(Object.keys(profileInfo).length === 0){\n        login();\n    }else{\n        fetchAllNotifications();\n    }\n  },[]);\n  useEffect(()=>{\n    if(Object.keys(profileInfo).length !== 0){\n        fetchAllNotifications();\n    }\n  },[profileInfo]);\n  const setProfilePic = (type) => {\n    type = type?.toLowerCase();\n      switch(type){\n        case \"medical\" : return <LocalHospitalIcon style={{ fontSize: 40 }}/>\n        case \"school\" : return <SchoolIcon style={{ fontSize: 40 }}/>\n        case \"business\" : return <BusinessIcon style={{ fontSize: 40 }}/>\n        default : return null;\n      }\n  }\n  const notificationAction = (e) => {\n        let actionType = e.currentTarget.name;\n        let  notificationid = e.currentTarget.getAttribute(\"notificationid\")\n        let param = {\n            DID: profileInfo.DID,\n            notificationid\n        }\n        dispatch(loader(true));\n        dispatch(actionOnNotification(actionType, param));\n  }\n  const showNotifications = () => {\n    return (notifications||[]).map((n)=>{\n        return(\n            <Grid\n              container\n              spacing={2}\n              alignItems={\"center\"}\n              key={n.requesterId}\n              className={\"notifications-border\"}\n            >\n                <Grid item xs={4} md={1}>\n                    <div className=\"image-container\">\n                        {setProfilePic(n.requesterType)}\n                    </div>\n                </Grid>\n                <Grid item xs={4} md={9}>\n                    <Grid\n                        container\n                        spacing={2}\n                        alignItems={\"center\"}\n                    >\n                        <Grid item xs={12} md={12}>\n                            <div className=\"requester-name\">\n                                {n.requesterName}\n                            </div>\n                        </Grid> \n                        <Grid item xs={12} md={12}>\n                            <div className=\"requester-info\">\n                                {n.requestedData && n.requestedData.message ? n.requestedData.message : \"\"}\n                            </div>\n                        </Grid> \n                        <Grid item xs={12} md={12}>\n                            <div className=\"requester-time\">\n                                {`Requested on: ${n.requestedTime}`} \n                            </div>\n                        </Grid> \n                    </Grid>\n                </Grid>\n                <Grid item xs={4} md={1}>\n                    <Button\n                        variant=\"contained\"\n                        className=\"full-width\"\n                        name=\"approve\"\n                        notificationid={n.requesterId}\n                        onClick={notificationAction}\n                    >\n                        APPROVE\n                    </Button>\n                </Grid>\n                <Grid item xs={4} md={1}>\n                    <Button\n                        variant=\"contained\"\n                        className=\"full-width\"\n                        name=\"reject\"\n                        notificationid={n.requesterId}\n                        onClick={notificationAction}\n                    >\n                        REJECT\n                    </Button>\n                </Grid>\n            </Grid>\n        )\n    })\n  }\n  return (\n    <React.Fragment>\n        {showLoader ? (\n        <div className={\"loader-parent\"}>\n            <div className={\"loader-container\"}>\n            <CircularProgress size={50} left={0} top={0} />\n            </div>\n        </div>\n        ) : null}\n        {errorMessage && <Alert severity=\"error\">{errorMessage}</Alert>}\n        <Card className=\"layout-card\">\n          <CardHeader title={\"Notifications\"}/>\n          <CardContent className=\"certificate-grid\">\n            {notifications === null || notifications.length === 0? \n            <div>No Notifications Available.</div>\n            :\n            showNotifications()}\n          </CardContent>\n        </Card>\n    </React.Fragment>\n  );\n};\n\nexport default Notifications;\n","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/actions/notificationActions.jsx",["175","176"],"import * as Actions from \".\";\nexport const getAllNotifications = (data) => {\n  return function (dispatch) {\n    let url = `/api/getAllNotifications/${data}`;\n    dispatch({\n      type: Actions.LOADER,\n      payload:false\n    })\n    let actionType = true;\n    if(actionType){\n      let notifications = [{\n            requestedData: {\n                message: \"Requesting for name.\",\n                param:[\"aadharNo\"]\n            },\n            requesterId:\"123\",\n            requesterName:\"Manipal Hospital\",\n            requestedTime:\"12/10/2020 10:10:00\",\n            requesterType:\"Medical\",\n        },\n        {\n            requestedData: {\n                message: \"Requesting for aadhar number.\",\n                param:[\"aadharNo\"]\n            },\n            requesterId:\"1234\",\n            requesterName:\"Manipal Hospital\",\n            requestedTime:\"12/10/2020 10:10:00\",\n            requesterType:\"Medical\",\n        },\n        {\n            requestedData: {\n                message: \"Requesting for registration number.\",\n                param:[\"registrationNo\"]\n            },\n            requesterId:\"12345\",\n            requesterName:\"KIIT University\",\n            requestedTime:\"05/10/2014 12:00:00\",\n            requesterType:\"School\",\n        },\n        {\n            requestedData: {\n                message: \"Requesting for employee id.\",\n                param:[\"employeeId\"]\n            },\n            requesterId:\"123456\",\n            requesterName:\"Tata Consultancy Services\",\n            requestedTime:\"10/15/2015 15:00:00\",\n            requesterType:\"Business\",\n        },\n        {\n            requestedData: {\n                message: \"Requesting for details of Joining date, Release date, Designation from previous company experience letter.\",\n                param:[\"joiningDate, releaseDate, designation\"]\n            },\n            requesterId:\"1234567\",\n            requesterName:\"Walmart\",\n            requestedTime:\"10/15/2015 15:00:00\",\n            requesterType:\"Business\",\n        },\n     ]\n      dispatch({\n          type: Actions.GET_ALL_NOTIFICATIONS,\n          payload: {\n              errorMessage:'',\n              notifications\n          }\n      });\n    }else{\n      dispatch({\n        type:  Actions.GET_ALL_NOTIFICATIONS,\n        payload: {\n          errorMessage:'Some error occured. Please try again later',\n          notifications:[]\n        }\n      });\n    }\n  }\n//   return async function (dispatch) {\n//     const response = await fetch(url, {\n//       method: \"GET\",\n//       notifications: \"include\",\n//     });\n//     dispatch({\n//       type: Actions.LOADER,\n//       payload:false\n//     })\n//     if (response.status === 200) {\n//         dispatch({\n//             type: Actions.GET_ALL_NOTIFICATIONS,\n//             payload: {\n//                 errorMessage:'',\n//                 notifications: data.notifications\n//             }\n//         });\n//     } else {\n//         dispatch({\n//             type:  Actions.GET_ALL_NOTIFICATIONS,\n//             payload: {\n//               errorMessage:'Some error occured. Please try again later',\n//               notifications:[]\n//             }\n//         });\n//     }\n//   };\n}\nexport const actionOnNotification = (type, data) => {\n    return function (dispatch) {\n      let url = `/api/actionOnNotification/${type}/${data}`;\n      let actionType = true;\n      if(actionType){\n        dispatch({\n            type: Actions.NOTIFICATION_ACTION,\n            payload: {\n                errorMessage:'',\n                notificationAction:true\n            }\n        });\n        dispatch(getAllNotifications(data.DID));\n      }else{\n        dispatch({\n          type:  Actions.NOTIFICATION_ACTION,\n          payload: {\n            errorMessage:'Some error occured. Please try again later',\n            notificationAction:false\n          }\n        });\n        dispatch({\n            type: Actions.LOADER,\n            payload:false\n        })\n      }\n    }\n  //   return async function (dispatch) {\n  //     const response = await fetch(url, {\n  //       method: \"GET\",\n  //       notifications: \"include\",\n  //     });\n  //     dispatch({\n  //       type: Actions.LOADER,\n  //       payload:false\n  //     })\n  //     if (response.status === 200) {\n            // dispatch({\n            //     type: Actions.GET_ALL_NOTIFICATIONS,\n            //     payload: {\n            //         errorMessage:'',\n            //         notificationAction:true\n            //     }\n            // });\n  //     } else {\n  //         dispatch({\n            //   type:  Actions.GET_ALL_NOTIFICATIONS,\n            //   payload: {\n            //     errorMessage:'Some error occured. Please try again later',\n            //     notificationAction:false\n            //   }\n    //      });\n  //     }\n  //   };\n  }","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/certificate.js",["177","178"],"/* eslint-disable complexity */\nimport React, { useEffect } from \"react\";\nimport Degree from './degree';\nimport Covid from './covid';\nimport Experience from './experience';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Alert } from \"@material-ui/lab\";\nimport {\n    loginUser,\n    loader\n  } from \"../actions/userAction\";\n  import {\n    getCertificateDetails\n  } from \"../actions/credentialAction\";\nconst Certificate = (props) => {\n    const dispatch = useDispatch();\n    const profileInfo = useSelector(\n        (state) => state.user.profileInfo\n    );\n    const errorMessage = useSelector(\n        (state) => state.credential.errorMessage\n    );\n    const fetchCertificateDetails = () => {\n        let param = {\n            DID: profileInfo.DID,\n            credentialId: props.match.params.id\n        }\n        dispatch(loader(true));\n        dispatch(getCertificateDetails(param, props.match.params.type));\n    }\n    const login = () => {\n        const username = localStorage.getItem(\"username\");\n        const password = localStorage.getItem(\"password\");\n        if(username && password && Object.keys(profileInfo).length === 0){\n            let param = {\n                username,\n                password,\n            };\n            dispatch(loader(true));\n            dispatch(loginUser(param , \"login\"));\n        }\n    }\n    useEffect(()=>{\n        if(Object.keys(profileInfo).length === 0){\n            login();\n        }else{\n            fetchCertificateDetails();\n        }\n    },[]);\n    useEffect(()=>{\n        if(Object.keys(profileInfo).length !== 0){\n            fetchCertificateDetails();\n        }\n    },[profileInfo]);\n    \n    const showCertificate = () => {\n        let type = (props.match.params.type||\"\").toLowerCase();\n        switch(type){\n                case \"medical\" : return <Covid/>;\n                case \"school\" : return <Degree/>;\n                case \"business\" : return <Experience/>;\n                default : return null;\n        }\n    }\n    return (\n      <React.Fragment>\n        {errorMessage && <Alert severity=\"error\">{errorMessage}</Alert>}\n        {showCertificate()}\n      </React.Fragment>\n    );\n};\n\nexport default Certificate;\n\n\n","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/experience.js",["179"],"/* eslint-disable complexity */\nimport {\n    Card,\n    CardHeader,\n    CardContent,\n    Grid,\n} from \"@material-ui/core\";\nimport React , {useEffect, useState}from \"react\";\nimport { useSelector } from \"react-redux\";\nimport TCS from \"../images/tcslogo.png\";\nimport PropTypes from \"prop-types\";\n\nconst Experience = (props) => {\n    const data = useSelector(\n        (state) => state.credential.certificateDetails\n    );\n    const [experienceLetter , setExperienceLetter] = useState(data || {});\n    useEffect(()=>{\n      if(props.readFrom){\n        setExperienceLetter(props.readFrom||{});\n      }\n    },[]);\n    console.log(\"experienceLetter\",experienceLetter,props.readFrom);\n    if(!experienceLetter || Object.keys(experienceLetter).length===0){\n        return null;\n    }\n    \n    return (\n        <React.Fragment>\n        <Card>\n          <CardHeader \n            title={<img src={TCS} className={\"office-logo\"} alt={experienceLetter.ownerName || \"NA\"}/>}/>\n          <CardContent className=\"degree-grid\">\n            <Grid\n              container\n              spacing={2}\n              justify=\"flex-end\"\n              alignItems=\"center\"\n              style={{textAlign:\"right\"}}\n            >\n               <Grid item xs={12} md={12}>\n                   <b>{experienceLetter.verificationId || \"NA\"}</b>\n               </Grid>\n            </Grid>\n            <Grid\n              container\n              spacing={2}\n              justify=\"center\"\n              alignItems=\"center\"\n            >\n               <Grid item xs={12} md={12}>\n                    <div className={\"degree-certificate-name\"}>\n                        <b> {experienceLetter.certificateName || \"NA\"} </b>\n                    </div>\n               </Grid>\n            </Grid>\n            <Grid\n              container\n              spacing={2}\n              justify=\"flex-start\"\n              alignItems=\"center\"\n              style={{textAlign:\"left\"}}\n            >\n               <Grid item xs={12} md={12}>\n                   This is to certify that <b>{experienceLetter.name || \"NA\"}</b> was employed by us and {experienceLetter.gender===\"F\" ? \"her\" : \"his\"} particulars of service are as under:\n               </Grid>\n               <Grid item xs={12} md={12}>\n                    <Grid\n                        container\n                        spacing={2}\n                        justify=\"flex-start\"\n                        alignItems=\"center\"\n                        >\n                           <Grid item xs={6} md={4}>\n                               1. Name\n                            </Grid> \n                            <Grid item xs={6} md={4}>\n                                <b>:{experienceLetter.gender===\"F\" ? \" Ms.\" : \" Mr.\"} {experienceLetter.name || \"NA\"}</b>\n                            </Grid> \n                    </Grid>\n               </Grid>\n               <Grid item xs={12} md={12}>\n                    <Grid\n                        container\n                        spacing={2}\n                        justify=\"flex-start\"\n                        alignItems=\"center\"\n                        >\n                           <Grid item xs={6} md={4}>\n                               2. Designation\n                            </Grid> \n                            <Grid item xs={6} md={4}>\n                                <b>:{experienceLetter.designation || \"NA\"}</b> \n                            </Grid> \n                    </Grid>\n               </Grid>\n               <Grid item xs={12} md={12}>\n                    <Grid\n                        container\n                        spacing={2}\n                        justify=\"flex-start\"\n                        alignItems=\"center\"\n                        >\n                           <Grid item xs={6} md={4}>\n                               3. Department\n                            </Grid> \n                            <Grid item xs={6} md={4}>\n                                <b>:{experienceLetter.department || \"NA\"}</b>\n                            </Grid> \n                    </Grid>\n               </Grid>\n               <Grid item xs={12} md={12}>\n                    <Grid\n                        container\n                        spacing={2}\n                        justify=\"flex-start\"\n                        alignItems=\"center\"\n                        >\n                           <Grid item xs={6} md={4}>\n                               4. Date of Joining\n                            </Grid> \n                            <Grid item xs={6} md={4}>\n                                <b>:{experienceLetter.doj || \"NA\"}</b>\n                            </Grid> \n                    </Grid>\n               </Grid>\n               <Grid item xs={12} md={12}>\n                    <Grid\n                        container\n                        spacing={2}\n                        justify=\"flex-start\"\n                        alignItems=\"center\"\n                        >\n                           <Grid item xs={6} md={4}>\n                               5. Date of Leaving\n                            </Grid> \n                            <Grid item xs={6} md={4}>\n                                <b>:{experienceLetter.dol || \"NA\"}</b>\n                            </Grid> \n                    </Grid>\n               </Grid>\n               <Grid item xs={12} md={12}>\n                    <Grid\n                        container\n                        spacing={2}\n                        justify=\"flex-start\"\n                        alignItems=\"center\"\n                        >\n                           <Grid item xs={6} md={4}>\n                               6. Reason of Leaving\n                            </Grid> \n                            <Grid item xs={6} md={4}>\n                                <b>:{experienceLetter.reason || \"NA\"}</b>\n                            </Grid> \n                    </Grid>\n               </Grid>\n               <Grid item xs={12} md={12}>\n                    <Grid\n                        container\n                        spacing={2}\n                        justify=\"flex-start\"\n                        alignItems=\"center\"\n                        >\n                           <Grid item xs={6} md={4}>\n                               7. Remarks\n                            </Grid> \n                            <Grid item xs={6} md={4}>\n                                <b>:{experienceLetter.remarks || \"NA\"}</b>\n                            </Grid> \n                    </Grid>\n               </Grid>\n               <Grid item xs={12} md={12}>\n                   Dated: <b>{experienceLetter.issuedOn || \"NA\"}</b>\n               </Grid>\n            </Grid>\n            <Grid\n              container\n              spacing={2}\n              justify=\"flex-end\"\n              alignItems=\"center\"\n              style={{textAlign:\"right\"}}\n            >\n               <Grid item xs={12} md={12}>\n                {experienceLetter.issuedBy || \"NA\"}\n               </Grid>\n               <Grid item xs={12} md={12}>\n                  {experienceLetter.issuedByTeam || \"NA\"}\n               </Grid>\n            </Grid>\n          </CardContent>\n        </Card>\n    </React.Fragment>\n    );\n};\n\nexport default Experience;\n\n\nExperience.propTypes = {\n    readFrom: PropTypes.any,\n  };","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/covid.js",["180"],"import {\n  Card,\n  CardHeader,\n  CardContent,\n  Grid,\n} from \"@material-ui/core\";\nimport React, {useEffect, useState} from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Manipal from \"../images/manipallogo.jpeg\";\nimport PropTypes from \"prop-types\";\n\nconst Covid = (props) => {\n  const data = useSelector(\n      (state) => state.credential.certificateDetails\n  );\n  const [covidLetter , setCovidLetter] = useState(data || {});\n  useEffect(()=>{\n    if(props.readFrom){\n      setCovidLetter(props.readFrom||{});\n    }\n  },[])\n  \n  if(!covidLetter || Object.keys(covidLetter).length===0){\n      return null;\n  }\n\n  return (\n      <React.Fragment>\n      <Card>\n        <CardHeader \n          title={<img src={Manipal} className={\"medical-logo\"} alt={covidLetter.ownerName || \"NA\"}/>}\n        />\n        <CardContent className=\"degree-grid\">\n          <Grid\n            container\n            spacing={2}\n            justify=\"center\"\n            alignItems=\"center\"\n          >\n            <Grid item xs={12} md={12}>\n                  <div className={\"Covid-department-name\"}>\n                      <b> {covidLetter.department || \"NA\"} </b>\n                  </div> \n             </Grid>\n\n             <Grid item xs={12} md={12} >\n                  <div className={\"Covid-certificate-name\"}>\n                      <b> {covidLetter.certificateName || \"NA\"} </b>\n                  </div>\n             </Grid>\n              \n             \n          </Grid>\n          <Grid\n            container\n            spacing={2}\n            justify=\"flex-start\"\n            alignItems=\"center\"\n            style={{textAlign:\"left\"}}\n          >\n             <Grid item xs={12} md={12} className={\"Covid-certificate-details\"}>\n                 This is to certify that <b>{covidLetter.name || \"NA\"}</b> <br/>\n                 Sex <b>{covidLetter.gender ? covidLetter.gender===\"F\" ? \"female\" : \"male\" : \"NA\" }</b>, \n                 Age <b>{covidLetter.age || \"NA\"}yrs.</b>,\n                 Residing at <b>{covidLetter.remarks || \"NA\"}</b> <br/>\n                 is healthy and not suffering from COVID-19.\n             </Grid>\n             \n          </Grid>\n          <div className={\"mgBtm20\"}/>\n          <Grid\n            container\n            spacing={2}\n            justify=\"flex-end\"\n            alignItems=\"center\"\n          >\n                  <Grid item xs={6} md={6}>\n                      <Grid\n                          container\n                          spacing={2}\n                          justify=\"flex-end\"\n                          alignItems=\"center\"\n                          style={{textAlign:\"left\"}}\n                      >\n                          <Grid item xs={12} md={12}>\n                              Place: <b>{covidLetter.location || \"NA\"}</b>\n                          </Grid>\n                          <Grid item xs={12} md={12}>\n                              Date: <b>{covidLetter.issuedOn || \"NA\"}</b>\n                          </Grid>\n                      </Grid>\n                  </Grid>\n                  <Grid item xs={6} md={6}>\n                  <Grid\n                      container\n                      spacing={2}\n                      justify=\"flex-end\"\n                      alignItems=\"center\"\n                      style={{textAlign:\"right\"}}\n                  >\n                      <Grid item xs={12} md={12}>\n                          {covidLetter.issuedBy || \"NA\"}\n                      </Grid>\n                      <Grid item xs={12} md={12}>\n                          {covidLetter.issuedByTeam || \"NA\"}\n                      </Grid>\n                  </Grid>\n              </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n  </React.Fragment>\n  );\n};\n\nexport default Covid;\n\n\nCovid.propTypes = {\n  readFrom: PropTypes.any,\n};","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/degree.js",["181"],"/* eslint-disable complexity */\nimport {\n    Card,\n    CardHeader,\n    CardContent,\n    Grid,\n} from \"@material-ui/core\";\nimport React , {useEffect, useState}from \"react\";\nimport { useSelector } from \"react-redux\";\nimport KIIT from \"../images/kiitlogo.png\";\nimport PropTypes from \"prop-types\";\n\nconst Degree = (props) => {\n    const data = useSelector(\n        (state) => state.credential.certificateDetails\n    );\n    const [degreeLetter , setDegreeLetter] = useState(data || {});\n    useEffect(()=>{\n      if(props.readFrom){\n        setDegreeLetter(props.readFrom||{});\n      }\n    },[]);\n    if(!degreeLetter || Object.keys(degreeLetter).length===0){\n        return null;\n    }\n    return (\n\n        <React.Fragment>\n        <Card>\n          <CardHeader \n            title={<img src={KIIT} className={\"office-logo\"} alt={degreeLetter.ownerName || \"NA\"}/>}\n          />\n          <CardContent className=\"degree-grid\">\n            <Grid\n              container\n              spacing={2}\n              justify=\"center\"\n              alignItems=\"center\"\n            >\n               <Grid item xs={12} md={12} >\n                    <div className={\"degree-certificate-name\"}>\n                        <b> {degreeLetter.certificateName || \"NA\"} </b>\n                    </div>\n               </Grid>\n                <Grid item xs={12} md={12} >\n                    <div className={\"degree-certificate-name-title\"}>\n                        for the degree of\n                    </div> \n               </Grid>\n               <Grid item xs={12} md={12}>\n                    <div className={\"degree-department-name\"}>\n                        <b> {degreeLetter.department || \"NA\"} </b>\n                    </div> \n               </Grid>\n            </Grid>\n            <Grid\n              container\n              spacing={2}\n              justify=\"flex-start\"\n              alignItems=\"center\"\n              style={{textAlign:\"left\"}}\n            >\n               <Grid item xs={12} md={12} className={\"degree-certificate-details\"}>\n                   This is to certify that <b>{degreeLetter.name || \"NA\"}</b> <br/>\n                   bearing the Registration No. <b>{degreeLetter.verificationId || \"NA\"}</b> <br/>\n                   has successfully completed in the <b>{degreeLetter.dol || \"NA\"}</b> <br/>\n                   all the prescribed requirements under the regulations <br/>\n                   for the degree of <b>{degreeLetter.department || \"NA\"}</b>\n               </Grid>\n               \n            </Grid>\n            <div className={\"mgBtm20\"}/>\n            <Grid\n              container\n              spacing={2}\n              justify=\"flex-end\"\n              alignItems=\"center\"\n            >\n                    <Grid item xs={6} md={6}>\n                        <Grid\n                            container\n                            spacing={2}\n                            justify=\"flex-end\"\n                            alignItems=\"center\"\n                            style={{textAlign:\"left\"}}\n                        >\n                            <Grid item xs={12} md={12}>\n                                Place: <b>{degreeLetter.location || \"NA\"}</b>\n                            </Grid>\n                            <Grid item xs={12} md={12}>\n                                Date: <b>{degreeLetter.issuedOn || \"NA\"}</b>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={6} md={6}>\n                    <Grid\n                        container\n                        spacing={2}\n                        justify=\"flex-end\"\n                        alignItems=\"center\"\n                        style={{textAlign:\"right\"}}\n                    >\n                        <Grid item xs={12} md={12}>\n                            {degreeLetter.issuedBy || \"NA\"}\n                        </Grid>\n                        <Grid item xs={12} md={12}>\n                            {degreeLetter.issuedByTeam || \"NA\"}\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n          </CardContent>\n        </Card>\n    </React.Fragment>\n    );\n};\n\nexport default Degree;\n\n\nDegree.propTypes = {\n    readFrom: PropTypes.any,\n  };","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/connections.js",["182","183","184","185","186","187","188","189"],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/actions/connectionAction.js",["190","191"],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/reducers/connectionReducer.js",[],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/issueCredentials.js",["192","193"],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/degreeForm.js",[],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/covidForm.js",[],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/experienceForm.js",["194"],"/* eslint-disable complexity */\nimport {\n    Card,\n    CardHeader,\n    CardContent,\n    Grid,\n    CardActions,\n    Button,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    FormHelperText,\n    TextField\n} from \"@material-ui/core\";\nimport React, {useState} from \"react\";\nimport { useSelector } from \"react-redux\";\nimport TCS from \"../images/tcslogo.png\";\nimport PropTypes from \"prop-types\";\n\nconst ExperienceForm = (props) => {\n    const [experienceParam ,setExperienceParam] = useState({\n        ownerName: props.profileName,\n        verificationId:\"\",\n        certificateName:\"\",\n        name:props.connectionName,\n        designation:\"\",\n        department:\"\",\n        doj:\"\",\n        dol:\"\",\n        gender:\"\",\n        reason:\"\",\n        remarks:\"\",\n        location:\"\",\n        issuedOn:\"\",\n        issuedBy:\"\",\n        issuedByTeam:\"\"\n    })\n    const [experienceParamError ,setExperienceParamError] = useState({\n        ownerName: false,\n        verificationId:false,\n        certificateName:false,\n        name:false,\n        designation:false,\n        department:false,\n        doj:false,\n        dol:false,\n        gender:false,\n        reason:false,\n        remarks:false,\n        location:false,\n        issuedOn:false,\n        issuedBy:false,\n        issuedByTeam:false\n    })\n    const setExperienceCredentials = (e) => {\n        setExperienceParam({ ...experienceParam, ...{ [e.target.name]: e.target.value } });\n    }\n    const issueCertificate = () => {\n        let param = {};\n        let passCheck = true;\n        for(let i in experienceParam){\n            if(!!experienceParam[i]){\n                param[i]= false;\n            }else{\n                passCheck = false;\n                param[i]= true;\n            }\n        }\n        setExperienceParamError(param);\n        if(passCheck){\n            console.log(\"experienceParam\",experienceParam);\n            props.submitCredentialForm(experienceParam);\n        }\n    }\n    return (\n        <React.Fragment>\n        <Card>\n          <CardHeader \n            title={<img src={TCS} className={\"office-logo\"} alt={props.profileName}/>}/>\n          <CardContent className=\"degree-grid-form\">\n            <Grid\n              container\n              spacing={2}\n              justify=\"flex-end\"\n              alignItems=\"center\"\n              style={{textAlign:\"right\"}}\n            >\n               <Grid item xs={6} md={4}>\n                    <TextField \n                        id=\"verificationId\" \n                        name=\"verificationId\"\n                        value={experienceParam.verificationId}\n                        onChange={setExperienceCredentials}\n                        placeholder={\"eg: TCS/EMP/834930\"}\n                        error={experienceParamError.verificationId}\n                        helperText={\n                            experienceParamError.verificationId ? \"Please enter employee no.\" : \"\"\n                        }/> \n               </Grid>\n            </Grid>\n            <Grid\n              container\n              spacing={2}\n              justify=\"center\"\n              alignItems=\"center\"\n            >\n               <Grid item xs={12} md={12}>\n               <Grid item xs={12} md={12} >\n                    <div className={\"degree-certificate-name\"}>\n                        <TextField \n                            id=\"certificateName\" \n                            name=\"certificateName\"\n                            onChange={setExperienceCredentials}\n                            value={experienceParam.certificateName}\n                            error={experienceParamError.certificateName}\n                            helperText={\n                                experienceParamError.certificateName ? \"Please enter certificate name.\" : \"\"\n                            }\n                            placeholder={\"eg: Service Certificate\"}/>\n                    </div>\n               </Grid>\n               </Grid>\n            </Grid>\n            <Grid\n              container\n              spacing={2}\n              justify=\"flex-start\"\n              alignItems=\"center\"\n              style={{textAlign:\"left\"}}\n            >\n               <Grid item xs={12} md={12}>\n                   This is to certify that <b>{props.connectionName}</b> was employed by us and \n                   <FormControl>\n                        <InputLabel id=\"demo-gender-label\">Gender</InputLabel>\n                            <Select\n                                labelId=\"demo-gender-label\"\n                                id=\"gender\"\n                                name=\"gender\"\n                                value={experienceParam.gender}\n                                onChange={setExperienceCredentials}\n                                >\n                                <MenuItem value={\"M\"}>Male</MenuItem>\n                                <MenuItem value={\"F\"}>Female</MenuItem>\n                            </Select>\n                    </FormControl>\n                   {experienceParamError.gender && <FormHelperText>Please select gender.</FormHelperText>}\n                   {experienceParam.gender===\"F\" ? \" her \" : \" his \"} \n                   particulars of service are as under:\n               </Grid>\n               <Grid item xs={12} md={12}>\n                    <Grid\n                        container\n                        spacing={2}\n                        justify=\"flex-start\"\n                        alignItems=\"center\"\n                        >\n                           <Grid item xs={6} md={4}>\n                               1. Name\n                            </Grid> \n                            <Grid item xs={6} md={8}>\n                                <b>{props.connectionName}</b>\n                            </Grid> \n                    </Grid>\n               </Grid>\n               <Grid item xs={12} md={12}>\n                    <Grid\n                        container\n                        spacing={2}\n                        justify=\"flex-start\"\n                        alignItems=\"center\"\n                        >\n                           <Grid item xs={6} md={4}>\n                               2. Designation\n                            </Grid> \n                            <Grid item xs={6} md={8}>\n                                <TextField \n                                    id=\"designation\" \n                                    name=\"designation\"\n                                    onChange={setExperienceCredentials}\n                                    value={experienceParam.designation}\n                                    error={experienceParamError.designation}\n                                    helperText={\n                                        experienceParamError.designation ? \"Please enter designation.\" : \"\"\n                                    }\n                                    placeholder={\"eg: CSIS\"}/>\n                            </Grid> \n                    </Grid>\n               </Grid>\n               <Grid item xs={12} md={12}>\n                    <Grid\n                        container\n                        spacing={2}\n                        justify=\"flex-start\"\n                        alignItems=\"center\"\n                        >\n                           <Grid item xs={6} md={4}>\n                               3. Department\n                            </Grid> \n                            <Grid item xs={6} md={8}>\n                                <TextField \n                                    id=\"department\" \n                                    name=\"department\"\n                                    onChange={setExperienceCredentials}\n                                    value={experienceParam.department}\n                                    error={experienceParamError.department}\n                                    helperText={\n                                        experienceParamError.department ? \"Please enter department name.\" : \"\"\n                                    }\n                                    placeholder={\"eg: CSIS\"}/>\n                            </Grid> \n                    </Grid>\n               </Grid>\n               <Grid item xs={12} md={12}>\n                    <Grid\n                        container\n                        spacing={2}\n                        justify=\"flex-start\"\n                        alignItems=\"center\"\n                        >\n                           <Grid item xs={6} md={4}>\n                               4. Date of Joining\n                            </Grid> \n                            <Grid item xs={6} md={8}>\n                                <TextField \n                                    id=\"doj\" \n                                    name=\"doj\"\n                                    onChange={setExperienceCredentials}\n                                    value={experienceParam.doj}\n                                    error={experienceParamError.doj}\n                                    helperText={\n                                        experienceParamError.doj ? \"Please enter date of joining.\" : \"\"\n                                    }\n                                    placeholder={\"eg: 06/16/2014\"}/>\n                            </Grid> \n                    </Grid>\n               </Grid>\n               <Grid item xs={12} md={12}>\n                    <Grid\n                        container\n                        spacing={2}\n                        justify=\"flex-start\"\n                        alignItems=\"center\"\n                        >\n                           <Grid item xs={6} md={4}>\n                               5. Date of Leaving\n                            </Grid> \n                            <Grid item xs={6} md={8}>\n                                <TextField \n                                    id=\"dol\" \n                                    name=\"dol\"\n                                    onChange={setExperienceCredentials}\n                                    value={experienceParam.dol}\n                                    error={experienceParamError.dol}\n                                    helperText={\n                                        experienceParamError.dol ? \"Please enter date of leaving.\" : \"\"\n                                    }\n                                    placeholder={\"eg: 09/11/2015\"}/>\n                            </Grid> \n                    </Grid>\n               </Grid>\n               <Grid item xs={12} md={12}>\n                    <Grid\n                        container\n                        spacing={2}\n                        justify=\"flex-start\"\n                        alignItems=\"center\"\n                        >\n                           <Grid item xs={6} md={4}>\n                               6. Reason of Leaving\n                            </Grid> \n                            <Grid item xs={6} md={8}>\n                                <TextField \n                                    id=\"reason\" \n                                    name=\"reason\"\n                                    onChange={setExperienceCredentials}\n                                    value={experienceParam.reason}\n                                    error={experienceParamError.reason}\n                                    helperText={\n                                        experienceParamError.reason ? \"Please enter reason.\" : \"\"\n                                    }\n                                    placeholder={\"eg: Resigned\"}/>\n                            </Grid> \n                    </Grid>\n               </Grid>\n               <Grid item xs={12} md={12}>\n                    <Grid\n                        container\n                        spacing={2}\n                        justify=\"flex-start\"\n                        alignItems=\"center\"\n                        >\n                           <Grid item xs={6} md={4}>\n                               7. Remarks\n                            </Grid> \n                            <Grid item xs={6} md={8}>\n                                <TextField \n                                    id=\"remarks\" \n                                    name=\"remarks\"\n                                    onChange={setExperienceCredentials}\n                                    value={experienceParam.remarks}\n                                    error={experienceParamError.remarks}\n                                    helperText={\n                                        experienceParamError.remarks ? \"Please enter remarks.\" : \"\"\n                                    }\n                                    placeholder={\"eg: Remarks\"}/>\n                            </Grid> \n                    </Grid>\n               </Grid>\n               <Grid item xs={12} md={12}>\n                    <Grid\n                        container\n                        spacing={2}\n                        justify=\"flex-start\"\n                        alignItems=\"center\"\n                    >\n                        <Grid item xs={6} md={4}>\n                            Dated\n                        </Grid> \n                        <Grid item xs={6} md={8}>\n                         <TextField \n                                id=\"issuedOn\" \n                                name=\"issuedOn\"\n                                value={experienceParam.issuedOn}\n                                onChange={setExperienceCredentials}\n                                placeholder={\"eg: 12/14/2020\"}\n                                error={experienceParamError.issuedOn}\n                                helperText={\n                                    experienceParamError.issuedOn ? \"Please enter issued on date.\" : \"\"\n                                }/>\n                    </Grid> \n                    </Grid>\n               </Grid>\n            </Grid>\n            <Grid\n              container\n              spacing={2}\n              justify=\"flex-end\"\n              alignItems=\"center\"\n              style={{textAlign:\"right\"}}\n            >\n               <Grid item xs={6} md={4}>\n                    <TextField \n                            id=\"issuedBy\" \n                            name=\"issuedBy\"\n                            value={experienceParam.issuedBy}\n                            onChange={setExperienceCredentials}\n                            placeholder={\"Issuer name\"}\n                            error={experienceParamError.issuedBy}\n                            helperText={\n                                experienceParamError.issuedBy ? \"Please enter issuer name.\" : \"\"\n                            }/>\n                </Grid>\n            </Grid>\n            <Grid\n              container\n              spacing={2}\n              justify=\"flex-end\"\n              alignItems=\"center\"\n              style={{textAlign:\"right\"}}\n            >\n                <Grid item xs={6} md={4}>\n                    <TextField \n                            id=\"issuedByTeam\" \n                            name=\"issuedByTeam\"\n                            value={experienceParam.issuedByTeam}\n                            onChange={setExperienceCredentials}\n                            placeholder={\"Issuer department\"}\n                            error={experienceParamError.issuedByTeam}\n                            helperText={\n                                experienceParamError.issuedByTeam ? \"Please enter issuer department.\" : \"\"\n                            }/>\n                </Grid>\n            </Grid>\n          </CardContent>\n          <CardActions>\n            <Button\n                variant=\"contained\"\n                className=\"full-width\"\n                onClick={issueCertificate}\n            >\n                Issue certificate\n            </Button>\n          </CardActions>\n        </Card>\n    </React.Fragment>\n    );\n};\n\nexport default ExperienceForm;\n\n\nExperienceForm.propTypes = {\n    connectionName: PropTypes.string,\n    profileName: PropTypes.string,\n    submitCredentialForm: PropTypes.func\n  };","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/RequestCredentials.js",["195","196","197"],"/* eslint-disable complexity */\nimport React, { useEffect } from \"react\";\nimport Degree from './degree';\nimport Covid from './covid';\nimport Experience from './experience';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Alert } from \"@material-ui/lab\";\nimport {\n    loginUser,\n    loader\n  } from \"../actions/userAction\";\n  import {\n    getCertificateDetails\n  } from \"../actions/credentialAction\";\nconst RequestCredentials = (props) => {\n    const dispatch = useDispatch();\n    const profileInfo = useSelector(\n        (state) => state.user.profileInfo\n    );\n    const errorMessage = useSelector(\n        (state) => state.credential.errorMessage\n    );\n    const fetchCertificateDetails = () => {\n        let param = {\n            DID: profileInfo.DID,\n            credentialId: props.match.params.id\n        }\n        dispatch(loader(true));\n        dispatch(getCertificateDetails(param, props.match.params.type));\n    }\n    const login = () => {\n        const username = localStorage.getItem(\"username\");\n        const password = localStorage.getItem(\"password\");\n        if(username && password && Object.keys(profileInfo).length === 0){\n            let param = {\n                username,\n                password,\n            };\n            dispatch(loader(true));\n            dispatch(loginUser(param , \"login\"));\n        }\n    }\n    useEffect(()=>{\n        if(Object.keys(profileInfo).length === 0){\n            login();\n        }else{\n            fetchCertificateDetails();\n        }\n    },[]);\n    useEffect(()=>{\n        if(Object.keys(profileInfo).length !== 0){\n            fetchCertificateDetails();\n        }\n    },[profileInfo]);\n    \n    const showCertificate = () => {\n        let type = (props.match.params.type||\"\").toLowerCase();\n        switch(type){\n                case \"medical\" : return <Covid/>;\n                case \"school\" : return <Degree/>;\n                case \"business\" : return <Experience/>;\n                default : return null;\n        }\n    }\n    return (\n      <React.Fragment>\n        {errorMessage && <Alert severity=\"error\">{errorMessage}</Alert>}\n            Details of {props.match.params.name?.toUpperCase()} are\n            \n      </React.Fragment>\n    );\n};\n\nexport default RequestCredentials;\n\n\n",["198","199"],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/requestCredentials.js",["200","201"],"/* eslint-disable complexity */\nimport React, { useEffect, useState } from \"react\";\nimport Degree from './degree';\nimport Covid from './covid';\nimport Experience from './experience';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Alert } from \"@material-ui/lab\";\nimport {\n    Card,\n    CardHeader,\n    CardContent,\n    Grid,\n    Dialog,\n    DialogContent,\n    DialogContentText,\n    DialogActions,\n    Button,\n} from \"@material-ui/core\";\nimport LocalHospitalIcon from '@material-ui/icons/LocalHospital';\nimport SchoolIcon from '@material-ui/icons/School';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport {\n    loginUser,\n    loader\n  } from \"../actions/userAction\";\n  import {\n    getAlreadyRequestedCertificateDetails\n  } from \"../actions/credentialAction\";\nconst RequestCredentials = (props) => {\n    const dispatch = useDispatch();\n    const profileInfo = useSelector(\n        (state) => state.user.profileInfo\n    );\n    const errorMessage = useSelector(\n        (state) => state.credential.errorMessage\n    );\n    const certificateAlreadyRequested  = useSelector(\n        (state) => state.credential.certificateAlreadyRequested\n    )\n    const [showCredentialDialog, setShowCredentialDialog] = useState(false);\n    const [credentialDataByAgent, setCredentialDataByAgent] = useState({});\n    const [certificateType, setFetchedCertificateType] = useState(\"\");\n    const fetchRequestedCertificateDetails = () => {\n        let param = {\n            DID: profileInfo.DID,\n            credentialId: props.match.params.identity\n        }\n        dispatch(loader(true));\n        dispatch(getAlreadyRequestedCertificateDetails(param));\n    }\n    const login = () => {\n        const username = localStorage.getItem(\"username\");\n        const password = localStorage.getItem(\"password\");\n        if(username && password && Object.keys(profileInfo).length === 0){\n            let param = {\n                username,\n                password,\n            };\n            dispatch(loader(true));\n            dispatch(loginUser(param , \"login\"));\n        }\n    }\n    useEffect(()=>{\n        if(Object.keys(profileInfo).length === 0){\n            login();\n        }else{\n            fetchRequestedCertificateDetails();\n        }\n    },[]);\n    useEffect(()=>{\n        if(Object.keys(profileInfo).length !== 0){\n            fetchRequestedCertificateDetails();\n        }\n    },[profileInfo]);\n    \n    const showRequestedCredentials = () => {\n        let type = certificateType;\n        switch(type){\n                case \"medical\" : return <Covid readFrom={credentialDataByAgent[type]}/>;\n                case \"school\" : return <Degree readFrom={credentialDataByAgent[type]}/>;\n                case \"business\" : return <Experience readFrom={credentialDataByAgent[type]}/>;\n                default : return null;\n        }\n    }\n    const setCertificateType = (type) => {\n        type = type?.toLowerCase();\n        switch(type){\n          case \"medical\" : return \"COVID CERTIFICATE\"\n          case \"school\" : return \"DEGREE CERTIFICATE\"\n          case \"business\" : return \"EXPERIENCE LETTER\"\n          default : return null;\n        }\n    }\n    const setProfilePic = (type) => {\n        type = type?.toLowerCase();\n        switch(type){\n          case \"medical\" : return <LocalHospitalIcon style={{ fontSize: 50 }}/>\n          case \"school\" : return <SchoolIcon style={{ fontSize: 50 }}/>\n          case \"business\" : return <BusinessIcon style={{ fontSize: 50 }}/>\n          default : return null;\n        }\n    }\n    const showCredentials = () => {\n        return (certificateAlreadyRequested||[]).map((c,index)=>{\n            return(\n                <Grid item xs={6} md={4} key={index} \n                        onClick={()=>{\n                          setCredentialDataByAgent({[c.type]:c});\n                          setShowCredentialDialog(true);\n                          setFetchedCertificateType(c.type);\n                        }\n                        }>\n                    <div className=\"certificate-container\">\n                    <Grid\n                        container\n                        spacing={2}\n                        alignItems={\"center\"}\n                        >\n                        <Grid item xs={6} md={3}>\n                            <div className=\"image-container\">\n                                {setProfilePic(c.type)}\n                            </div>\n                        </Grid>\n                        <Grid item xs={6} md={9}>\n                            <Grid\n                                container\n                                spacing={2}\n                                alignItems={\"center\"}\n                            >\n                                <Grid item xs={6} md={12}>\n                                    <div className=\"certificate-issuer\">\n                                        {c.ownerName}\n                                    </div>\n                                </Grid>\n                                <Grid item xs={12} md={12}>\n                                    <div className=\"certificate-name\">\n                                        {setCertificateType(c.type)}\n                                    </div>\n                                </Grid>\n                                <Grid item xs={12} md={12}>\n                                    <div className=\"certificate-issued-on\">\n                                        {`Issued on: ${c.requestedOn}`} <div>(MM/DD/YYYY)</div>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    </div>\n                </Grid>\n            )\n        })\n      }\n    return (\n      <React.Fragment>\n        {errorMessage && <Alert severity=\"error\">{errorMessage}</Alert>}\n            <Card className=\"layout-card\">\n                <CardHeader title={` Details of ${props.match.params.name?.toUpperCase()}`}/>\n                <CardContent className=\"certificate-grid\">\n                {certificateAlreadyRequested === null || certificateAlreadyRequested.length === 0? \n                    <div>No Credentials Available.</div>\n                    :\n                    <Grid\n                    container\n                    spacing={2}\n                    alignItems={\"center\"}\n                    justify=\"flex-start\"\n                    >\n                        {showCredentials()}\n                    </Grid>\n                }\n                </CardContent>\n                </Card>\n                <Dialog\n                    open={showCredentialDialog||false}\n                    onClose={() => setShowCredentialDialog(false)}\n                    aria-labelledby=\"alert-dialog-title\"\n                    aria-describedby=\"alert-dialog-description\"\n                >\n                    <DialogContent>\n                        <DialogContentText id=\"alert-dialog-description\">\n                            {showRequestedCredentials()}\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button variant=\"contained\"\n                            onClick={() => {\n                                setShowCredentialDialog(false);\n                                setCredentialDataByAgent({});\n                                setFetchedCertificateType(\"\");\n                              }\n                            }>\n                            Close\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n      </React.Fragment>\n    );\n};\n\nexport default RequestCredentials;\n\n\n","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/requestNewCredentials.js",["202","203","204"],"/* eslint-disable complexity */\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Alert, Autocomplete } from \"@material-ui/lab\";\nimport {TextField,\n        Grid,\n        Card,\n        CardHeader,\n        CardContent,\n        Button,\n        FormControl,\n        InputLabel,\n        Select,\n        MenuItem,\n        Checkbox,\n        ListItemText,\n        FormHelperText} from '@material-ui/core';\nimport {\n    loginUser,\n    loader\n} from \"../actions/userAction\";\nimport {\n    requestCredentials,\n} from \"../actions/credentialAction\";\nimport {\n    getAllConnections\n} from \"../actions/connectionAction\";\nconst RequestNewCredentails = (props) => {\n    const dispatch = useDispatch();\n    const profileInfo = useSelector(\n        (state) => state.user.profileInfo\n    );\n    const errorMessage = useSelector(\n        (state) => state.credential.errorMessage\n    );\n    const connections = useSelector(\n        (state) => state.connection.connections\n    );\n    const [connectionName, setConnectionName] = useState(\"\");\n    const [connectionInputValue, setConnectionInputValue] = useState(\"\");\n    const [certificateType, saveCertificateType] = useState(\"\");\n    const [paramsSelected, setSelectedParams] = React.useState([]);\n    const setParams = (event) => {\n        setSelectedParams(event.target.value);\n    };\n    const login = () => {\n        const username = localStorage.getItem(\"username\");\n        const password = localStorage.getItem(\"password\");\n        if(username && password && Object.keys(profileInfo).length === 0){\n            let param = {\n                username,\n                password,\n            };\n            dispatch(loader(true));\n            dispatch(loginUser(param , \"login\"));\n        }\n    }\n    const credentails = {\n        \"degree\" : {\n            params:[\n                {id : \"companyName\", name : \"College Name\"}, \n                {id : \"name\", name : \" Name\"},\n                {id : \"registartionNo\", name : \" Registartion Number\"}, \n                {id :\"dol\" , name : \"Date of Completion\"},\n                {id :\"department\", name : \"Department\"},\n                {id :\"location\" , name : \"Location where issued\"},\n                {id :\"issuedOn\", name : \"Issued On\"},\n                {id :\"issuedBy\", name : \"Issued By\"},\n                {id : \"issuedByTeam\", name : \"Issued By Team\"}\n            ]\n        },\n        \"experience\":{\n            params:[\n                {id :\"companyName\" , name : \"Company Name\"}, \n                {id :\"name\" , name : \"Name\"},\n                {id :\"gender\" , name : \"Gender\"},\n                {id :\"designation\" , name : \"Designation\"},\n                {id :\"department\" , name : \"Department\"},\n                {id :\"doj\" , name : \"Date of Joining\"},\n                {id :\"dol\" , name : \"Date of Leaving\"},\n                {id :\"reason\" , name : \"Reason\"},\n                {id :\"remarks\" , name : \"Remarks\"},\n                {id :\"issuedOn\" , name : \"Issued On\"},\n                {id :\"issuedBy\" , name : \"Issued By\"},\n                {id :\"issuedByTeam\" , name : \"Issued By Team\"}\n            ]\n        },\n        \"medical\":{\n            params:[\n                {id :\"companyName\" , name: \"Hospital Name\"}, \n                {id :\"name\" , name: \"Name\"},\n                {id :\"gender\" , name: \"Gender\"},\n                {id :\"age\" , name: \"Age\"},\n                {id :\"address\" , name: \"Address\"},\n                {id :\"location\"  , name: \"Location where issued\"},\n                {id :\"issuedOn\" , name: \"Issued On\"},\n                {id :\"issuedBy\" , name: \"Issued By\"},\n                {id :\"issuedByTeam\" , name: \"Issued By Team\"}\n            ]\n        },\n    }\n    const fetchAllConnections = () => {\n        let param = profileInfo.DID;\n        dispatch(loader(true));\n        dispatch(getAllConnections(param));\n    }\n    const showConnections = () => {\n        return (\n            <Autocomplete\n                value={connectionName}\n                onChange={(event, newValue) => {\n                    setConnectionName(newValue);\n                }}\n                inputValue={connectionInputValue}\n                onInputChange={(event, connectionInputValue) => {\n                    setConnectionInputValue(connectionInputValue);\n                }}\n                renderOption={(option) => (\n                    <React.Fragment>\n                      {option.name} ({option.identity})\n                    </React.Fragment>\n                )}\n                getOptionLabel={(option) => option.name||\"\"}\n                id=\"controllable-connection\"\n                options={connections||[]}\n                style={{ width: '100%' }}\n                renderInput={(params) => <TextField {...params} label=\"Connection\" variant=\"outlined\" />}\n            />\n        )\n    }\n    const showCertificatesName = () => {\n        return(\n            <React.Fragment>\n                <FormControl variant=\"outlined\">\n                    <InputLabel id=\"certificate-simple-select-outlined-label\">Certificate Type</InputLabel>\n                    <Select\n                    labelId=\"certificate-simple-select-outlined-label\"\n                    id=\"certificate\"\n                    name=\"certificate\"\n                    value={certificateType||\"\"}\n                    onChange={(e)=>saveCertificateType(e.target.value)}\n                    label=\"Certificate Type\"\n                    >\n                        <MenuItem value={\"degree\"}>\n                                {\"Provisional Certificate\"}\n                        </MenuItem>\n                        <MenuItem value={\"medical\"}>\n                                {\"Covid Certificate\"}\n                        </MenuItem>\n                        <MenuItem value={\"experience\"}>\n                                {\"Experience Certificate\"}\n                        </MenuItem>\n                    </Select>\n                </FormControl>\n            </React.Fragment>\n        )\n    }\n    const showParams = () => {\n        return (\n            <FormControl variant=\"outlined\">\n                <InputLabel id=\"demo-simple-select-outlined-label\">Params</InputLabel>\n                <Select\n                labelId=\"demo-simple-select-outlined-label\"\n                id=\"demo-simple-select-outlined\"\n                value={paramsSelected||[]}\n                multiple\n                onChange={setParams}\n                renderValue={(selected) => selected.length+\" selected\" }\n                label=\"Params\"\n                >\n                {credentails[certificateType].params?.map((p) => (\n                    <MenuItem key={p.id} value={p.id}>\n                        <Checkbox color=\"primary\" checked={paramsSelected.indexOf(p.id) > -1} />\n                        <ListItemText primary={p.name} />\n                    </MenuItem>\n                ))}\n                </Select>\n            </FormControl>\n        )\n    }\n    const requestParams = () => {\n        if(paramsSelected.length && !!certificateType && !!connectionName){\n            let param = {\n                did: connectionName.identity,\n                certificateType:certificateType,\n                paramsSelected:paramsSelected\n            }\n            dispatch(requestCredentials(param));\n        }\n    }\n    const checkRequest = () => {\n        console.log(paramsSelected,certificateType,connectionName);\n        if(paramsSelected.length && !!certificateType && !!connectionName){\n            return false\n        }else{\n            return true;\n        }\n    }\n    useEffect(()=>{\n        if(Object.keys(profileInfo).length === 0){\n            login();\n        }else{\n            fetchAllConnections();\n        }\n        \n    },[]);\n    useEffect(()=>{\n        if(Object.keys(profileInfo).length !== 0){\n            fetchAllConnections();\n        }\n    },[profileInfo]);\n  \n    return (\n      <div className=\"degree-grid-form\">\n        {errorMessage && <Alert severity=\"error\">{errorMessage}</Alert>}\n        <Card className={\"mgTop10\"}>\n          <CardHeader className={\"mgleft10\"} title={\"Request Credentials\"}/>\n          <CardContent>\n          {(connections||[]).length  ?\n            <Grid\n              style={{ width: \"320px\", margin: \"0 auto\" }}\n              container\n              alignItems={\"center\"}\n              spacing={2}\n            >\n                <Grid item xs={12} md={12}>\n                    {showConnections()}\n                </Grid>\n                <Grid item xs={12} md={12}>\n                    {showCertificatesName()}\n                </Grid>\n                <Grid item xs={12} md={12}>\n                    {certificateType && showParams()}\n                </Grid>\n                <Grid item xs={12} md={12}>\n                    <Button\n                    variant=\"contained\"\n                    className=\"full-width\"\n                    onClick={requestParams}\n                    disabled={checkRequest()}\n                    >\n                    REQUEST\n                    </Button>\n                </Grid>\n            </Grid>\n            :\n            <div>\n                There is no connection to request credential from.\n            </div>\n            }\n          </CardContent>\n        </Card>\n        \n       </div>\n    );\n};\n\nexport default RequestNewCredentails;\n\n\n",{"ruleId":"205","replacedBy":"206"},{"ruleId":"207","replacedBy":"208"},{"ruleId":"209","severity":1,"message":"210","line":6,"column":3,"nodeType":"211","messageId":"212","endLine":6,"endColumn":11},{"ruleId":"213","severity":1,"message":"214","line":101,"column":5,"nodeType":"215","endLine":101,"endColumn":19,"suggestions":"216"},{"ruleId":"213","severity":1,"message":"217","line":114,"column":5,"nodeType":"215","endLine":114,"endColumn":30,"suggestions":"218"},{"ruleId":"209","severity":1,"message":"219","line":4,"column":10,"nodeType":"211","messageId":"212","endLine":4,"endColumn":21},{"ruleId":"209","severity":1,"message":"220","line":4,"column":23,"nodeType":"211","messageId":"212","endLine":4,"endColumn":34},{"ruleId":"209","severity":1,"message":"221","line":7,"column":35,"nodeType":"211","messageId":"212","endLine":7,"endColumn":38},{"ruleId":"209","severity":1,"message":"222","line":7,"column":40,"nodeType":"211","messageId":"212","endLine":7,"endColumn":49},{"ruleId":"223","severity":1,"message":"224","line":161,"column":34,"nodeType":"225","messageId":"226","endLine":161,"endColumn":36},{"ruleId":"223","severity":1,"message":"224","line":164,"column":35,"nodeType":"225","messageId":"226","endLine":164,"endColumn":37},{"ruleId":"213","severity":1,"message":"227","line":45,"column":5,"nodeType":"215","endLine":45,"endColumn":7,"suggestions":"228"},{"ruleId":"229","severity":1,"message":"230","line":50,"column":33,"nodeType":"231","endLine":50,"endColumn":78},{"ruleId":"229","severity":1,"message":"230","line":51,"column":32,"nodeType":"231","endLine":51,"endColumn":74},{"ruleId":"229","severity":1,"message":"230","line":52,"column":34,"nodeType":"231","endLine":52,"endColumn":75},{"ruleId":"223","severity":1,"message":"224","line":66,"column":37,"nodeType":"225","messageId":"226","endLine":66,"endColumn":39},{"ruleId":"213","severity":1,"message":"232","line":59,"column":5,"nodeType":"215","endLine":59,"endColumn":7,"suggestions":"233"},{"ruleId":"213","severity":1,"message":"234","line":64,"column":5,"nodeType":"215","endLine":64,"endColumn":18,"suggestions":"235"},{"ruleId":"209","severity":1,"message":"236","line":4,"column":9,"nodeType":"211","messageId":"212","endLine":4,"endColumn":12},{"ruleId":"209","severity":1,"message":"236","line":138,"column":9,"nodeType":"211","messageId":"212","endLine":138,"endColumn":12},{"ruleId":"209","severity":1,"message":"236","line":195,"column":9,"nodeType":"211","messageId":"212","endLine":195,"endColumn":12},{"ruleId":"209","severity":1,"message":"236","line":286,"column":9,"nodeType":"211","messageId":"212","endLine":286,"endColumn":12},{"ruleId":"213","severity":1,"message":"237","line":61,"column":5,"nodeType":"215","endLine":61,"endColumn":7,"suggestions":"238"},{"ruleId":"213","severity":1,"message":"239","line":66,"column":5,"nodeType":"215","endLine":66,"endColumn":18,"suggestions":"240"},{"ruleId":"209","severity":1,"message":"236","line":4,"column":9,"nodeType":"211","messageId":"212","endLine":4,"endColumn":12},{"ruleId":"209","severity":1,"message":"236","line":109,"column":11,"nodeType":"211","messageId":"212","endLine":109,"endColumn":14},{"ruleId":"213","severity":1,"message":"241","line":49,"column":7,"nodeType":"215","endLine":49,"endColumn":9,"suggestions":"242"},{"ruleId":"213","severity":1,"message":"243","line":54,"column":7,"nodeType":"215","endLine":54,"endColumn":20,"suggestions":"244"},{"ruleId":"213","severity":1,"message":"245","line":22,"column":7,"nodeType":"215","endLine":22,"endColumn":9,"suggestions":"246"},{"ruleId":"213","severity":1,"message":"247","line":21,"column":5,"nodeType":"215","endLine":21,"endColumn":7,"suggestions":"248"},{"ruleId":"213","severity":1,"message":"249","line":22,"column":7,"nodeType":"215","endLine":22,"endColumn":9,"suggestions":"250"},{"ruleId":"209","severity":1,"message":"251","line":39,"column":5,"nodeType":"211","messageId":"212","endLine":39,"endColumn":31},{"ruleId":"209","severity":1,"message":"252","line":44,"column":9,"nodeType":"211","messageId":"212","endLine":44,"endColumn":23},{"ruleId":"213","severity":1,"message":"253","line":106,"column":5,"nodeType":"215","endLine":106,"endColumn":7,"suggestions":"254"},{"ruleId":"213","severity":1,"message":"255","line":111,"column":5,"nodeType":"215","endLine":111,"endColumn":18,"suggestions":"256"},{"ruleId":"213","severity":1,"message":"217","line":118,"column":5,"nodeType":"215","endLine":118,"endColumn":39,"suggestions":"257"},{"ruleId":"258","severity":1,"message":"259","line":187,"column":33,"nodeType":"260","endLine":187,"endColumn":62},{"ruleId":"209","severity":1,"message":"261","line":231,"column":9,"nodeType":"211","messageId":"212","endLine":231,"endColumn":25},{"ruleId":"229","severity":1,"message":"230","line":388,"column":25,"nodeType":"231","endLine":388,"endColumn":44},{"ruleId":"209","severity":1,"message":"262","line":2,"column":20,"nodeType":"211","messageId":"212","endLine":2,"endColumn":29},{"ruleId":"209","severity":1,"message":"236","line":49,"column":11,"nodeType":"211","messageId":"212","endLine":49,"endColumn":14},{"ruleId":"213","severity":1,"message":"263","line":100,"column":7,"nodeType":"215","endLine":100,"endColumn":9,"suggestions":"264"},{"ruleId":"213","severity":1,"message":"255","line":105,"column":7,"nodeType":"215","endLine":105,"endColumn":20,"suggestions":"265"},{"ruleId":"209","severity":1,"message":"219","line":17,"column":10,"nodeType":"211","messageId":"212","endLine":17,"endColumn":21},{"ruleId":"213","severity":1,"message":"241","line":49,"column":7,"nodeType":"215","endLine":49,"endColumn":9,"suggestions":"266"},{"ruleId":"213","severity":1,"message":"243","line":54,"column":7,"nodeType":"215","endLine":54,"endColumn":20,"suggestions":"267"},{"ruleId":"209","severity":1,"message":"268","line":56,"column":11,"nodeType":"211","messageId":"212","endLine":56,"endColumn":26},{"ruleId":"205","replacedBy":"269"},{"ruleId":"207","replacedBy":"270"},{"ruleId":"213","severity":1,"message":"271","line":69,"column":7,"nodeType":"215","endLine":69,"endColumn":9,"suggestions":"272"},{"ruleId":"213","severity":1,"message":"273","line":74,"column":7,"nodeType":"215","endLine":74,"endColumn":20,"suggestions":"274"},{"ruleId":"209","severity":1,"message":"275","line":17,"column":9,"nodeType":"211","messageId":"212","endLine":17,"endColumn":23},{"ruleId":"213","severity":1,"message":"253","line":206,"column":7,"nodeType":"215","endLine":206,"endColumn":9,"suggestions":"276"},{"ruleId":"213","severity":1,"message":"255","line":211,"column":7,"nodeType":"215","endLine":211,"endColumn":20,"suggestions":"277"},"no-native-reassign",["278"],"no-negated-in-lhs",["279"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.","ArrayExpression",["280"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["281"],"'useSelector' is defined but never used.","'useDispatch' is defined but never used.","'Box' is defined but never used.","'Container' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'login' and 'profileInfo'. Either include them or remove the dependency array.",["282"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'fetchAllCredentials', 'login', and 'profileInfo'. Either include them or remove the dependency array.",["283"],"React Hook useEffect has a missing dependency: 'fetchAllCredentials'. Either include it or remove the dependency array.",["284"],"'url' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchAllNotifications', 'login', and 'profileInfo'. Either include them or remove the dependency array.",["285"],"React Hook useEffect has a missing dependency: 'fetchAllNotifications'. Either include it or remove the dependency array.",["286"],"React Hook useEffect has missing dependencies: 'fetchCertificateDetails', 'login', and 'profileInfo'. Either include them or remove the dependency array.",["287"],"React Hook useEffect has a missing dependency: 'fetchCertificateDetails'. Either include it or remove the dependency array.",["288"],"React Hook useEffect has a missing dependency: 'props.readFrom'. Either include it or remove the dependency array. If 'setExperienceLetter' needs the current value of 'props.readFrom', you can also switch to useReducer instead of useState and read 'props.readFrom' in the reducer.",["289"],"React Hook useEffect has a missing dependency: 'props.readFrom'. Either include it or remove the dependency array. If 'setCovidLetter' needs the current value of 'props.readFrom', you can also switch to useReducer instead of useState and read 'props.readFrom' in the reducer.",["290"],"React Hook useEffect has a missing dependency: 'props.readFrom'. Either include it or remove the dependency array. If 'setDegreeLetter' needs the current value of 'props.readFrom', you can also switch to useReducer instead of useState and read 'props.readFrom' in the reducer.",["291"],"'verifyParticularConnection' is defined but never used.","'getCookieValue' is defined but never used.","React Hook useEffect has missing dependencies: 'fetchAllConnections', 'login', and 'profileInfo'. Either include them or remove the dependency array.",["292"],"React Hook useEffect has a missing dependency: 'fetchAllConnections'. Either include it or remove the dependency array.",["293"],["294"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'acceptConnection' is assigned a value but never used.","'getCookie' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'fetchAllConnections', 'login', and 'profileInfo'. Either include them or remove the dependency array.",["295"],["296"],["297"],["298"],"'showCertificate' is assigned a value but never used.",["278"],["279"],"React Hook useEffect has missing dependencies: 'fetchRequestedCertificateDetails', 'login', and 'profileInfo'. Either include them or remove the dependency array.",["299"],"React Hook useEffect has a missing dependency: 'fetchRequestedCertificateDetails'. Either include it or remove the dependency array.",["300"],"'FormHelperText' is defined but never used.",["301"],["302"],"no-global-assign","no-unsafe-negation",{"desc":"303","fix":"304"},{"desc":"305","fix":"306"},{"desc":"307","fix":"308"},{"desc":"309","fix":"310"},{"desc":"311","fix":"312"},{"desc":"313","fix":"314"},{"desc":"315","fix":"316"},{"desc":"317","fix":"318"},{"desc":"319","fix":"320"},{"desc":"321","fix":"322"},{"desc":"321","fix":"323"},{"desc":"321","fix":"324"},{"desc":"325","fix":"326"},{"desc":"327","fix":"328"},{"desc":"329","fix":"330"},{"desc":"331","fix":"332"},{"desc":"327","fix":"333"},{"desc":"317","fix":"334"},{"desc":"319","fix":"335"},{"desc":"336","fix":"337"},{"desc":"338","fix":"339"},{"desc":"325","fix":"340"},{"desc":"327","fix":"341"},"Update the dependencies array to be: [loginSuccess, props.history]",{"range":"342","text":"343"},"Update the dependencies array to be: [dispatch, props.location.pathname]",{"range":"344","text":"345"},"Update the dependencies array to be: [login, profileInfo]",{"range":"346","text":"347"},"Update the dependencies array to be: [fetchAllCredentials, login, profileInfo]",{"range":"348","text":"349"},"Update the dependencies array to be: [fetchAllCredentials, profileInfo]",{"range":"350","text":"351"},"Update the dependencies array to be: [fetchAllNotifications, login, profileInfo]",{"range":"352","text":"353"},"Update the dependencies array to be: [fetchAllNotifications, profileInfo]",{"range":"354","text":"355"},"Update the dependencies array to be: [fetchCertificateDetails, login, profileInfo]",{"range":"356","text":"357"},"Update the dependencies array to be: [fetchCertificateDetails, profileInfo]",{"range":"358","text":"359"},"Update the dependencies array to be: [props.readFrom]",{"range":"360","text":"361"},{"range":"362","text":"361"},{"range":"363","text":"361"},"Update the dependencies array to be: [fetchAllConnections, login, profileInfo]",{"range":"364","text":"365"},"Update the dependencies array to be: [fetchAllConnections, profileInfo]",{"range":"366","text":"367"},"Update the dependencies array to be: [errorMessage, connectionVerified, dispatch]",{"range":"368","text":"369"},"Update the dependencies array to be: [dispatch, fetchAllConnections, login, profileInfo]",{"range":"370","text":"371"},{"range":"372","text":"367"},{"range":"373","text":"357"},{"range":"374","text":"359"},"Update the dependencies array to be: [fetchRequestedCertificateDetails, login, profileInfo]",{"range":"375","text":"376"},"Update the dependencies array to be: [fetchRequestedCertificateDetails, profileInfo]",{"range":"377","text":"378"},{"range":"379","text":"365"},{"range":"380","text":"367"},[3282,3296],"[loginSuccess, props.history]",[3535,3560],"[dispatch, props.location.pathname]",[1182,1184],"[login, profileInfo]",[1626,1628],"[fetchAllCredentials, login, profileInfo]",[1737,1750],"[fetchAllCredentials, profileInfo]",[1683,1685],"[fetchAllNotifications, login, profileInfo]",[1796,1809],"[fetchAllNotifications, profileInfo]",[1511,1513],"[fetchCertificateDetails, login, profileInfo]",[1642,1655],"[fetchCertificateDetails, profileInfo]",[601,603],"[props.readFrom]",[532,534],[587,589],[3037,3039],"[fetchAllConnections, login, profileInfo]",[3148,3161],"[fetchAllConnections, profileInfo]",[3345,3379],"[errorMessage, connectionVerified, dispatch]",[3439,3441],"[dispatch, fetchAllConnections, login, profileInfo]",[3566,3579],[1518,1520],[1649,1662],[2256,2258],"[fetchRequestedCertificateDetails, login, profileInfo]",[2396,2409],"[fetchRequestedCertificateDetails, profileInfo]",[7705,7707],[7832,7845]]