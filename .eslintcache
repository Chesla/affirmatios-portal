[{"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/index.js":"1","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/App.js":"2","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/reportWebVitals.js":"3","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/homePage.js":"4","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/login.js":"5","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/header.js":"6","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/constants.js":"7","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/reducers/index.js":"8","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/reducers/userReducer.js":"9","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/actions/index.js":"10","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/history.js":"11","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/actions/userAction.jsx":"12","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/profile.js":"13","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/reducers/credentialReducer.js":"14","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/credentials.js":"15","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/actions/credentialAction.jsx":"16","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/reducers/notificationReducer.js":"17","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/notifications.js":"18","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/actions/notificationActions.jsx":"19","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/certificate.js":"20","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/experience.js":"21","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/covid.js":"22","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/degree.js":"23","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/connections.js":"24","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/actions/connectionAction.js":"25","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/reducers/connectionReducer.js":"26","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/issueCredentials.js":"27","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/degreeForm.js":"28","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/covidForm.js":"29","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/experienceForm.js":"30"},{"size":456,"mtime":1610678442011,"results":"31","hashOfConfig":"32"},{"size":1502,"mtime":1610877769159,"results":"33","hashOfConfig":"32"},{"size":362,"mtime":1610603389125,"results":"34","hashOfConfig":"32"},{"size":971,"mtime":1610877876079,"results":"35","hashOfConfig":"32"},{"size":6462,"mtime":1610722432343,"results":"36","hashOfConfig":"32"},{"size":2836,"mtime":1610893352490,"results":"37","hashOfConfig":"32"},{"size":2088,"mtime":1610635450880,"results":"38","hashOfConfig":"32"},{"size":413,"mtime":1610730660161,"results":"39","hashOfConfig":"32"},{"size":1176,"mtime":1610862997354,"results":"40","hashOfConfig":"32"},{"size":779,"mtime":1610882289206,"results":"41","hashOfConfig":"32"},{"size":110,"mtime":1610633072618,"results":"42","hashOfConfig":"32"},{"size":3579,"mtime":1610866129640,"results":"43","hashOfConfig":"32"},{"size":4824,"mtime":1610877596146,"results":"44","hashOfConfig":"32"},{"size":1842,"mtime":1610882345118,"results":"45","hashOfConfig":"32"},{"size":5125,"mtime":1610877584501,"results":"46","hashOfConfig":"32"},{"size":6424,"mtime":1610883162864,"results":"47","hashOfConfig":"32"},{"size":912,"mtime":1610693269209,"results":"48","hashOfConfig":"32"},{"size":5654,"mtime":1610877593981,"results":"49","hashOfConfig":"32"},{"size":4791,"mtime":1610693256984,"results":"50","hashOfConfig":"32"},{"size":2198,"mtime":1610803274954,"results":"51","hashOfConfig":"32"},{"size":6787,"mtime":1610720157635,"results":"52","hashOfConfig":"32"},{"size":3420,"mtime":1610721349512,"results":"53","hashOfConfig":"32"},{"size":3887,"mtime":1610865552521,"results":"54","hashOfConfig":"32"},{"size":5597,"mtime":1610877569901,"results":"55","hashOfConfig":"32"},{"size":4255,"mtime":1610864960194,"results":"56","hashOfConfig":"32"},{"size":1184,"mtime":1610731963657,"results":"57","hashOfConfig":"32"},{"size":8210,"mtime":1610883349704,"results":"58","hashOfConfig":"32"},{"size":11157,"mtime":1610878348718,"results":"59","hashOfConfig":"32"},{"size":10898,"mtime":1610876556937,"results":"60","hashOfConfig":"32"},{"size":15974,"mtime":1610876554994,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"1s3r6g",{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"64"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"64"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"64"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"64"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"64"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"64"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"64"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"64"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"64"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"64"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"64"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"64"},"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/index.js",[],["136","137"],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/App.js",["138"],"// import logo from './logo.svg';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport thunk from \"redux-thunk\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport rootReducer from \"./reducers\";\nimport './App.css';\nimport HomePage from \"./components/homePage\";\nimport Login from \"./components/login\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport {theme} from \"./constants\";\nimport history from \"./history\";\nconst initialState = window.__WML_REDUX_INITIAL_STATE__;\nconst store = createStore(rootReducer, initialState, applyMiddleware(thunk));\nconst checkAuth = () => {\n  const username = localStorage.getItem(\"username\");\n  const password = localStorage.getItem(\"password\");\n  const pathName = window.location.pathname;\n  if(!pathName.includes(\"login\") && !pathName.includes(\"registration\")){\n    if(!username || !password){\n      history.push(\"/login\");\n    }\n  }\n}\nfunction App() {\n  return (\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <div className=\"App\">\n          <Router history={history}>\n              <Switch>\n                <Route exact path=\"/login\" component={Login} />\n                <Route exact path=\"/registration\" component={Login} />\n                <Route path=\"/\" component={HomePage} />\n              </Switch>\n            </Router>\n        </div>\n        </ThemeProvider>\n    </Provider>\n\n  );\n}\n\nexport default App;\ncheckAuth();\n","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/reportWebVitals.js",[],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/homePage.js",[],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/login.js",["139","140"],"/* eslint-disable complexity */\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { Alert } from \"@material-ui/lab\";\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Grid,\n  TextField,\n  CircularProgress,\n  Button,\n} from \"@material-ui/core\";\nimport {\n  loginUser,\n  loader,\n  initLoginData\n} from \"../actions/userAction\";\n\nconst usernameregex = /^(?=[a-zA-Z0-9._]{2,25}$)(?!.*[_.]{2})[^_.].*[^_.]$/;\nconst Login = (props) => {\n  const dispatch = useDispatch();\n  const loginType = props.location.pathname.includes(\"login\") ? \"login\" : \"register\";\n  const [itemData, setItemData] = useState({\n    username: \"\",\n    password: \"\",\n    firstLastName: \"\",\n  });\n  const [itemDataError, setItemDataError] = useState({\n    username: false,\n    password: false,\n    firstLastName: false\n  });\n  const showLoader = useSelector(\n    (state) => state.user.loader\n  );\n  const failureMessage = useSelector(\n    (state) => state.user.loginFailureMessage\n  );\n  const loginSuccess = useSelector(\n    (state) => state.user.loginSuccess\n  );\n  const saveInfo = (e) => {\n    if (e.target.value.trim() === \"\") {\n      setItemData({ ...itemData, ...{ [e.target.name]: e.target.value } });\n      setItemDataError({ ...itemDataError, ...{ [e.target.name]: true } });\n    }\n    if (e.target.name === \"username\" || e.target.name === \"firstLastName\") {\n      setItemData({ ...itemData, ...{ [e.target.name]: e.target.value } });\n      if (e.target.value.match(usernameregex)) {\n        setItemDataError({ ...itemDataError, ...{ [e.target.name]: false } });\n      } else {\n        setItemDataError({ ...itemDataError, ...{ [e.target.name]: true } });\n      }\n    }\n    else{\n      if (e.target.value.trim() !== \"\"){\n        setItemData({ ...itemData, ...{ [e.target.name]: e.target.value } });\n        setItemDataError({ ...itemDataError, ...{ [e.target.name]: false } });\n      }\n    }\n  };\n  const login = () => {\n    if(!itemData.username || !itemData.password){\n      let errorObj  = {\n          ...itemDataError,\n          username: !itemData.username ,\n          password: !itemData.password,\n          firstLastName: !itemData.firstLastName\n      }\n      setItemDataError(errorObj);\n    }else{\n      let param = {\n        username: itemData.username,\n        password: itemData.password,\n      };\n      if(loginType!==\"login\"){\n        param[\"name\"] = itemData.firstLastName;\n      }\n      dispatch(loader(true));\n      dispatch(loginUser(param , loginType));\n    }\n  }\n  useEffect(()=>{\n    if(loginSuccess){\n      props.history.push(\"/\");\n    }\n  },[loginSuccess])\n  useEffect(()=>{\n    dispatch(initLoginData());\n    setItemData({\n      username: \"\",\n      password: \"\",\n      firstLastName: \"\"\n    });\n    setItemDataError({\n      username: \"\",\n      password: \"\",\n      firstLastName: \"\"\n    })\n  },[props.location.pathname]);\n  return (\n    <div className=\"login-page\">\n      \n      <div className=\"login-box\">\n        <h1>AFFIRMATIO</h1>\n        {showLoader ? (\n          <div className={\"loader-parent\"}>\n            <div className={\"loader-container\"}>\n              <CircularProgress size={50} left={0} top={0} />\n            </div>\n          </div>\n        ) : null}\n        \n        <Card className={\"mgTop10\"}>\n          <CardHeader className={\"mgleft10\"} title={loginType===\"login\" ? \"Sign in\" : \"Register\"}/>\n          <CardContent>\n            <Grid\n              style={{ width: \"320px\", margin: \"0 auto\" }}\n              container\n              alignItems={\"center\"}\n              spacing={2}\n            >\n              <Grid item xs={12} md={12}>\n                <TextField\n                  label=\"User Name\"\n                  id=\"username\"\n                  name=\"username\"\n                  value={itemData.username}\n                  error={itemDataError.username}\n                  helperText={\n                    itemDataError.username\n                      ? \"Please enter a valid user name.\"\n                      : \"User name is the DID provided by government.\"\n                  }\n                  variant=\"outlined\"\n                  onChange={saveInfo}\n                />\n              </Grid>\n              {loginType!==\"login\" ?\n                <Grid item xs={12} md={12}>\n                  <TextField\n                    label=\"First Name and Last Name\"\n                    type=\"text\"\n                    id=\"firstLastName\"\n                    name=\"firstLastName\"\n                    value={itemData.firstLastName}\n                    error={itemDataError.firstLastName}\n                    helperText={\n                      itemDataError.firstLastName ? \"Please enter a name.\" : \"\"\n                    }\n                    variant=\"outlined\"\n                    onChange={saveInfo}\n                  />\n                </Grid>\n                :null\n              }\n              <Grid item xs={12} md={12}>\n                <TextField\n                  label=\"Password\"\n                  type=\"password\"\n                  id=\"password\"\n                  name=\"password\"\n                  value={itemData.password}\n                  error={itemDataError.password}\n                  helperText={\n                    itemDataError.password ? \"Please enter a password.\" : \"\"\n                  }\n                  variant=\"outlined\"\n                  onChange={saveInfo}\n                />\n              </Grid>\n              \n              <Grid item xs={12} md={12}>\n                <Button\n                  variant=\"contained\"\n                  className=\"full-width\"\n                  onClick={login}\n                >\n                  {loginType===\"login\" ? \"LOGIN\" : \"REGISTER\"}\n                </Button>\n              </Grid>\n              <Grid item xs={12} md={12}>\n                {failureMessage && <Alert severity=\"error\">{failureMessage}</Alert>}\n              </Grid>\n              {loginType===\"login\" ?\n              <Grid item xs={12} md={12}>\n                New to Affirmatio? \n                <Link to=\"/registration\" className=\"join-now\">Join Now</Link> \n              </Grid>\n              :\n              <Grid item xs={12} md={12}>\n                Already in Affirmatio? \n                <Link to=\"/login\" className=\"join-now\">Sign in</Link> \n              </Grid>\n                }\n            </Grid>\n            \n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/header.js",["141","142","143","144"],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/constants.js",[],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/reducers/index.js",[],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/reducers/userReducer.js",[],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/actions/index.js",[],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/history.js",[],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/actions/userAction.jsx",["145"],"import * as Actions from \"../actions\";\nexport const loginUser = (data, actionType) => {\n  return function (dispatch) {\n    let url = \"\";\n    if(actionType === \"login\"){\n        url = `/api/login/${data}`;\n    }else{\n        url = `/api/register/${data}`;\n    }\n    dispatch({\n      type: Actions.LOADER,\n      payload:false\n    })\n    if(actionType === \"login\"){\n      localStorage.setItem(\"username\",data.username);\n      localStorage.setItem(\"password\",data.password);\n      let agentType = data.username.toLowerCase() === \"chesla\" ? \"person\" \n      : data.username.toLowerCase() === \"manipal\" ? \"medical\" :\n      data.username.toLowerCase() === \"kiit\" ? \"school\" : \"buisness\";\n      localStorage.setItem(\"agentType\",agentType);\n      let profileInfo = {};\n      if(agentType === \"person\"){\n        profileInfo = {\n          DID: \"QWETVFF\",\n          firstLastName:\"Chesla\",\n          roles:[\"verifier\",\"holder\"],\n          email:\"cheslakar@gmail.com\",\n          mobile:\"+91 9591790442\",\n          type:\"Person\",\n          agentType\n        } \n      }else if(agentType === \"medical\"){\n        profileInfo = {\n          DID: \"QWETVFF\",\n          firstLastName:\"Manipal\",\n          roles:[\"verifier\",\"issuer\"],\n          email:\"cheslakar@gmail.com\",\n          mobile:\"+91 9591790442\",\n          type:\"Person\",\n          agentType\n        } \n      }else if(agentType === \"school\"){\n        profileInfo = {\n          DID: \"QWETVFF\",\n          firstLastName:\"KIIT\",\n          roles:[\"verifier\",\"issuer\"],\n          email:\"cheslakar@gmail.com\",\n          mobile:\"+91 9591790442\",\n          type:\"Person\",\n          agentType\n        } \n      }else{\n        profileInfo = {\n          DID: \"QWETVFF\",\n          firstLastName:\"TCS\",\n          roles:[\"verifier\",\"issuer\"],\n          email:\"cheslakar@gmail.com\",\n          mobile:\"+91 9591790442\",\n          type:\"Person\",\n          agentType\n        }\n      }\n      dispatch({\n          type: actionType === \"login\" ? Actions.LOGIN_USER : Actions.REGISTER_USER,\n          payload: {\n              loginAction: true,\n              loginFailureMessage:\"\",\n              profileInfo\n          }\n      });\n    }else{\n      dispatch({\n        type: actionType === \"login\" ? Actions.LOGIN_USER : Actions.REGISTER_USER,\n        payload: {\n          loginAction: false,\n          loginFailureMessage:\"Registration failed, please try again later.\",\n          profileInfo:{}\n        },\n      });\n    }\n  }\n    // return async function (dispatch) {\n    //   const response = await fetch(url, {\n    //     method: \"GET\",\n    //     credentials: \"include\",\n    //   });\n    //   dispatch({\n    //     type: Actions.LOADER,\n    //     payload:false\n    //   })\n    //   if (response.status === 200) {\n    //     localStorage.setItem(\"username\",data.username);\n    //     localStorage.setItem(\"password\",data.password);\n    //     dispatch({\n    //       type: actionType === \"login\" ? Actions.LOGIN_USER : Actions.REGISTER_USER,\n    //       payload: {\n    //           loginAction: true,\n    //       }\n    //     });\n    //   } else {\n    //     dispatch({\n    //       type: actionType === \"login\" ? Actions.LOGIN_USER : Actions.REGISTER_USER,\n    //       payload: false,\n    //     });\n    //   }\n    //   dispatch({\n    //       type: actionType === \"login\" ? Actions.LOGIN_USER : Actions.REGISTER_USER,\n    //       payload: false,\n    //   });\n    // };\n};\n\nexport const loader = (val) => {\n  return {\n    type: Actions.LOADER,\n    payload: val\n  };\n};\nexport const initLoginData = () => {\n  return {\n    type: Actions.INIT_LOGIN_DATA,\n  };\n}\n","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/profile.js",["146"],"/* eslint-disable complexity */\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n    Card,\n    CardHeader,\n    CardContent,\n    Grid,\n    TextField,\n    CircularProgress,\n} from \"@material-ui/core\";\nimport PersonIcon from '@material-ui/icons/Person';\nimport LocalHospitalIcon from '@material-ui/icons/LocalHospital';\nimport SchoolIcon from '@material-ui/icons/School';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport {\n  loginUser,\n  loader\n} from \"../actions/userAction\";\nconst Profile = (props) => {\n  const dispatch = useDispatch();\n  // const roles = [\"issuer\", \"holder\", \"verifier\"];\n  const profileInfo = useSelector(\n    (state) => state.user.profileInfo\n  );\n  const showLoader = useSelector(\n    (state) => state.user.loader\n  );\n  const login = () => {\n    const username = localStorage.getItem(\"username\");\n    const password = localStorage.getItem(\"password\");\n    if(username && password && Object.keys(profileInfo).length === 0){\n        let param = {\n            username,\n            password,\n        };\n        dispatch(loader(true));\n        dispatch(loginUser(param , \"login\"));\n    }\n  }\n  useEffect(()=>{\n    if(Object.keys(profileInfo).length === 0){\n        login();\n    }\n  },[])\n  const setProfilePic = (type) => {\n     type = type?.toLowerCase();\n      switch(type){\n        case \"person\" : return <PersonIcon style={{ fontSize: 200 }}/>\n        case \"medical\" : return <LocalHospitalIcon style={{ fontSize: 200 }}/>\n        case \"school\" : return <SchoolIcon style={{ fontSize: 200 }}/>\n        case \"business\" : return <BusinessIcon style={{ fontSize: 200 }}/>\n        default : return null;\n      }\n    \n  }\n  return (\n    <React.Fragment>\n      {showLoader ? (\n        <div className={\"loader-parent\"}>\n          <div className={\"loader-container\"}>\n            <CircularProgress size={50} left={0} top={0} />\n          </div>\n        </div>\n      ) : null}\n        <Card className=\"layout-card\">\n          <CardHeader title={`Hello ${profileInfo.firstLastName}`}/>\n          <CardContent className=\"profile-grid\">\n            <Grid\n              container\n              spacing={2}\n            >\n                <Grid item xs={6} md={3}>\n                    <div className=\"image-container\">\n                        {setProfilePic(profileInfo.type)}\n                    </div>\n                </Grid>\n                <Grid item xs={6} md={3}>\n                    <Grid\n                    container\n                    alignItems={\"center\"}\n                    spacing={2}\n                    >\n                        <Grid item xs={12} md={12}>\n                            <TextField\n                            label=\"User Name\"\n                            id=\"username\"\n                            name=\"username\"\n                            value={profileInfo.DID}\n                            InputProps={{\n                                readOnly: true,\n                            }}\n                            variant=\"outlined\"\n                            />\n                        </Grid>\n                        <Grid item xs={12} md={12}>\n                            <TextField\n                            label=\"Email Id\"\n                            id=\"email\"\n                            name=\"email\"\n                            value={profileInfo.email}\n                            InputProps={{\n                                readOnly: true,\n                            }}\n                            variant=\"outlined\"\n                            />\n                        </Grid>\n                        <Grid item xs={12} md={12}>\n                            <TextField\n                            label=\"Mobile Number\"\n                            id=\"mobile\"\n                            name=\"mobile\"\n                            value={profileInfo.mobile}\n                            InputProps={{\n                                readOnly: true,\n                            }}\n                            variant=\"outlined\"\n                            />\n                        </Grid>\n                        <Grid item xs={12} md={12}>\n                            <TextField\n                            label=\"Roles Assigned\"\n                            id=\"roles\"\n                            name=\"roles\"\n                            value={(profileInfo.roles||[]).join(\", \").toUpperCase()}\n                            InputProps={{\n                                readOnly: true,\n                            }}\n                            variant=\"outlined\"\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n          </CardContent>\n        </Card>\n      </React.Fragment>\n  );\n};\n\nexport default Profile;\n","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/reducers/credentialReducer.js",[],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/credentials.js",["147","148"],"/* eslint-disable complexity */\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Alert } from \"@material-ui/lab\";\nimport {\n    Card,\n    CardHeader,\n    CardContent,\n    Grid,\n    CircularProgress,\n} from \"@material-ui/core\";\nimport LocalHospitalIcon from '@material-ui/icons/LocalHospital';\nimport SchoolIcon from '@material-ui/icons/School';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport {\n  loginUser,\n  loader\n} from \"../actions/userAction\";\nimport {\n    getAllCredentials\n} from \"../actions/credentialAction\";\nconst Credentials = (props) => {\n  const dispatch = useDispatch();\n  const profileInfo = useSelector(\n    (state) => state.user.profileInfo\n  );\n  const certificates = useSelector(\n    (state) => state.credential.certificates\n  );\n  const showLoader = useSelector(\n    (state) => state.user.loader\n  );\n  const errorMessage = useSelector(\n    (state) => state.credential.errorMessage\n  );\n  const login = () => {\n    const username = localStorage.getItem(\"username\");\n    const password = localStorage.getItem(\"password\");\n    if(username && password && Object.keys(profileInfo).length === 0){\n        let param = {\n            username,\n            password,\n        };\n        dispatch(loader(true));\n        dispatch(loginUser(param , \"login\"));\n    }\n  }\n  const fetchAllCredentials = () => {\n    let param = profileInfo.DID;\n    dispatch(loader(true));\n    dispatch(getAllCredentials(param));\n  }\n  useEffect(()=>{\n    if(Object.keys(profileInfo).length === 0){\n        login();\n    }else{\n        fetchAllCredentials();\n    }\n  },[]);\n  useEffect(()=>{\n    if(Object.keys(profileInfo).length !== 0){\n        fetchAllCredentials();\n    }\n  },[profileInfo]);\n  const setProfilePic = (type) => {\n      type = type?.toLowerCase();\n      switch(type){\n        case \"medical\" : return <LocalHospitalIcon style={{ fontSize: 50 }}/>\n        case \"school\" : return <SchoolIcon style={{ fontSize: 50 }}/>\n        case \"business\" : return <BusinessIcon style={{ fontSize: 50 }}/>\n        default : return null;\n      }\n  }\n  const setCertificateType = (type) => {\n    type = type?.toLowerCase();\n    switch(type){\n      case \"medical\" : return \"COVID CERTIFICATE\"\n      case \"school\" : return \"DEGREE CERTIFICATE\"\n      case \"business\" : return \"EXPERIENCE LETTER\"\n      default : return null;\n    }\n}\n  const showCertificates = () => {\n    return (certificates||[]).map((c)=>{\n        return(\n            <Grid item xs={6} md={4} key={c.id} \n                  onClick={()=>window.open(`/credentails/${c.id}/${c.type}`,'_blank')}>\n                <div className=\"certificate-container\">\n                <Grid\n                    container\n                    spacing={2}\n                    alignItems={\"center\"}\n                    >\n                    <Grid item xs={6} md={3}>\n                        <div className=\"image-container\">\n                            {setProfilePic(c.type)}\n                        </div>\n                    </Grid>\n                    <Grid item xs={6} md={9}>\n                        <Grid\n                            container\n                            spacing={2}\n                            alignItems={\"center\"}\n                        >\n                            <Grid item xs={6} md={12}>\n                                <div className=\"certificate-issuer\">\n                                    {c.name}\n                                </div>\n                            </Grid>\n                            <Grid item xs={12} md={12}>\n                                <div className=\"certificate-name\">\n                                    {setCertificateType(c.type)}\n                                </div>\n                            </Grid>\n                            <Grid item xs={12} md={12}>\n                                <div className=\"certificate-issued-on\">\n                                    {`Issued on: ${c.date}`} <div>(MM/DD/YYYY)</div>\n                                </div>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                </div>\n            </Grid>\n        )\n    })\n  }\n  return (\n    <React.Fragment>\n        {showLoader ? (\n        <div className={\"loader-parent\"}>\n            <div className={\"loader-container\"}>\n            <CircularProgress size={50} left={0} top={0} />\n            </div>\n        </div>\n        ) : null}\n        {errorMessage && <Alert severity=\"error\">{errorMessage}</Alert>}\n        <Card className=\"layout-card\">\n          <CardHeader title={\"Certificates\"}/>\n          <CardContent className=\"certificate-grid\">\n          {certificates === null || certificates.length === 0? \n            <div>No Certificates Available.</div>\n            :\n            <Grid\n              container\n              spacing={2}\n              alignItems={\"center\"}\n              justify=\"center\"\n            >\n                {showCertificates()}\n            </Grid>\n          }\n          </CardContent>\n        </Card>\n    </React.Fragment>\n  );\n};\n\nexport default Credentials;\n","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/actions/credentialAction.jsx",["149","150","151"],"import * as Actions from \"../actions\";\nexport const getAllCredentials = (data) => {\n  return function (dispatch) {\n    let url = `/api/getAllCredentials/${data}`;\n    dispatch({\n      type: Actions.LOADER,\n      payload:false\n    })\n    let actionType = true;\n    if(actionType){\n      let certificates = [{\n        identity: \"QWETVFF\",\n        id:\"Manipal-1\",\n        name:\"Manipal Hospital\",\n        date:\"12/10/2020\",\n        type:\"Medical\",\n      },\n      {\n        identity: \"QWETVFF\",\n        id:\"KIIT-1\",\n        name:\"KIIT University\",\n        date:\"05/10/2014\",\n        type:\"School\",\n      },\n      {\n        identity: \"QWETVFF\",\n        id:\"TCS-1\",\n        name:\"Tata Consultancy Services\",\n        date:\"10/15/2015\",\n        type:\"Business\",\n      } ]\n      dispatch({\n          type: Actions.GET_ALL_CREDENTIALS,\n          payload: {\n              errorMessage:'',\n              certificates\n          }\n      });\n    }else{\n      dispatch({\n        type:  Actions.GET_ALL_CREDENTIALS,\n        payload: {\n          errorMessage:'Some error occured. Please try again later',\n          certificates:[]\n        }\n      });\n    }\n  }\n//   return async function (dispatch) {\n//     const response = await fetch(url, {\n//       method: \"GET\",\n//       certificates: \"include\",\n//     });\n//     dispatch({\n//       type: Actions.LOADER,\n//       payload:false\n//     })\n//     if (response.status === 200) {\n//         dispatch({\n//             type: Actions.GET_ALL_CREDENTIALS,\n//             payload: {\n//                 errorMessage:'',\n//                 certificates: data.certificates\n//             }\n//         });\n//     } else {\n//         dispatch({\n//             type:  Actions.GET_ALL_CREDENTIALS,\n//             payload: {\n//               errorMessage:'Some error occured. Please try again later',\n//               certificates:[]\n//             }\n//         });\n//     }\n//   };\n}\nconst credentialsData = (certificateType) => {\n  let data = {};\n  if(certificateType?.toLowerCase() === \"business\"){\n    data = {\n      name: \" Chesla Kar\",\n      gender: \"F\",\n      designation: \" Software Engineer\",\n      department:\" Apple IDC\",\n      doj:\" 06/16/2014\",\n      dol:\" 09/11/2015\",\n      remarks:\"-\",\n      issuedOn:\" 09/14/2015\",\n      issuedBy:\" Ritu Kumar\",\n      issuedByTeam: \" Deputy Head - Human Resources\",\n      reason:\" Resigned\",\n      verificationId: \"TCS/EMP/834930\",\n      ownerName: \"TATA Consultancy Services\",\n      certificateName: \"SERVICE CERTIFICATE\"\n    }\n  }else if(certificateType?.toLowerCase() === \"medical\"){\n    data = {\n      name: \" Chesla\",\n      gender: \"F\",\n      designation: \"\",\n      department:\" TO WHOMSOEVER IT MAY CONCERN\",\n      doj:\" 06/16/2014\",\n      dol:\" 09/11/2015\",\n      remarks:\"501, UKN Espernza, Thubrahalli, Whitefield, Bengaluru, Karnataka, 560066 \",\n      issuedOn:\" 12/14/2020\",\n      issuedBy:\" Ritu Kumar\",\n      issuedByTeam: \" Medical Officer\",\n      location:\" Bengaluru\",\n      reason:\" Resigned\",\n      age:\"27\",\n      verificationId: \"TCS/EMP/834930\",\n      ownerName: \"Manipal Hospital\",\n      certificateName: \"COVID CERTIFICATE\"\n    }\n  } else {\n    data = {\n      name: \" Chesla Kar\",\n      gender: \"F\",\n      designation: \" \",\n      department:\"B.TECH in Computer Science & Engineering\",\n      doj:\" \",\n      dol:\" month of May, 2014 \",\n      remarks:\"-\",\n      issuedOn:\" 26th May 2014\",\n      issuedBy:\" Prachet Bhuyian\",\n      issuedByTeam: \" Registar\",\n      reason:\" Resigned\",\n      location:\" Bhubaneswar\",\n      verificationId: \"1005042\",\n      ownerName: \"KIIT UNIVERSITY\",\n      certificateName: \"PROVISIONAL CERTIFICATE\"\n    }\n  }\n  return data;\n}\nexport const getCertificateDetails = (param, certificateType) => {\n  return function (dispatch) {\n    let url = `/api/getParticluarCredentials/${param}`;\n    dispatch({\n      type: Actions.LOADER,\n      payload:false\n    })\n    let actionType = true;\n    \n    if(actionType){\n      let data = credentialsData(certificateType);\n      dispatch({\n          type: Actions.PARTICLUAR_DETAIL_CREDENTIALS,\n          payload: {\n              errorMessage:'',\n              certificateDetails:data || {}\n          }\n      });\n    }else{\n      dispatch({\n        type:  Actions.PARTICLUAR_DETAIL_CREDENTIALS,\n        payload: {\n          errorMessage:'Some error occured. Please try again later',\n          certificateDetails:{}\n        }\n      });\n    }\n  }\n//   return async function (dispatch) {\n//     const response = await fetch(url, {\n//       method: \"GET\",\n//       certificates: \"include\",\n//     });\n//     dispatch({\n//       type: Actions.LOADER,\n//       payload:false\n//     })\n//     if (response.status === 200) {\n//         dispatch({\n//             type: Actions.GET_ALL_CREDENTIALS,\n//             payload: {\n//                 errorMessage:'',\n//                 certificates: data.certificates\n//             }\n//         });\n//     } else {\n//         dispatch({\n//             type:  Actions.GET_ALL_CREDENTIALS,\n//             payload: {\n//               errorMessage:'Some error occured. Please try again later',\n//               certificates:[]\n//             }\n//         });\n//     }\n//   };\n}\n\nexport const issueCredential = (data,certificateType) => {\n  return function (dispatch) {\n    let url = `/api/issueCredential/${data}`;\n    dispatch({\n      type: Actions.LOADER,\n      payload:false\n    })\n    let actionType = true;\n    if(actionType){\n      let credentialIssuedAlready = true;\n      if(!credentialIssuedAlready){\n        dispatch({\n          type:  Actions.CREDENTIALS_ISSUED,\n          payload:{\n            credentialIssued: true,\n            errorMessage:\"\"\n          }\n        })\n      }else{\n        dispatch({\n          type:  Actions.CREDENTIALS_ALREADY_ISSUED,\n          payload:{\n            credentialIssued: false,\n            credentialIssuedAlready:true,\n            certificateDetails:credentialsData(certificateType),\n            errorMessage:\"\"\n          }\n        })\n      }\n    }else{\n      if(actionType){\n        dispatch({\n          type:  Actions.CREDENTIALS_ISSUED,\n          payload:{\n            credentialIssued: false,\n            errorMessage:\"Some error occured. Please try again later\",\n          }\n        })\n      }\n    }\n  }\n}\n\nexport const initCredentialsDetails = (connectionVerified,errorMessage) => {\n  return {\n    type: Actions.INIT_CREDENTIALS,\n    payload:{\n      certificateDetails: {},\n    }\n  };\n}","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/reducers/notificationReducer.js",[],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/notifications.js",["152","153"],"/* eslint-disable complexity */\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Alert } from \"@material-ui/lab\";\nimport {\n    Card,\n    CardHeader,\n    CardContent,\n    Grid,\n    Button,\n    CircularProgress,\n} from \"@material-ui/core\";\nimport LocalHospitalIcon from '@material-ui/icons/LocalHospital';\nimport SchoolIcon from '@material-ui/icons/School';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport {\n  loginUser,\n  loader\n} from \"../actions/userAction\";\nimport {\n    getAllNotifications,\n    actionOnNotification\n} from \"../actions/notificationActions\";\nconst Notifications = (props) => {\n  const dispatch = useDispatch();\n  const profileInfo = useSelector(\n    (state) => state.user.profileInfo\n  );\n  const notifications = useSelector(\n    (state) => state.notification.notifications\n  );\n  const showLoader = useSelector(\n    (state) => state.user.loader\n  );\n  const errorMessage = useSelector(\n    (state) => state.notification.errorMessage\n  );\n  const login = () => {\n    const username = localStorage.getItem(\"username\");\n    const password = localStorage.getItem(\"password\");\n    if(username && password && Object.keys(profileInfo).length === 0){\n        let param = {\n            username,\n            password,\n        };\n        dispatch(loader(true));\n        dispatch(loginUser(param , \"login\"));\n    }\n  }\n  const fetchAllNotifications = () => {\n    let param = profileInfo.DID;\n    dispatch(loader(true));\n    dispatch(getAllNotifications(param));\n  }\n  useEffect(()=>{\n    if(Object.keys(profileInfo).length === 0){\n        login();\n    }else{\n        fetchAllNotifications();\n    }\n  },[]);\n  useEffect(()=>{\n    if(Object.keys(profileInfo).length !== 0){\n        fetchAllNotifications();\n    }\n  },[profileInfo]);\n  const setProfilePic = (type) => {\n    type = type?.toLowerCase();\n      switch(type){\n        case \"medical\" : return <LocalHospitalIcon style={{ fontSize: 40 }}/>\n        case \"school\" : return <SchoolIcon style={{ fontSize: 40 }}/>\n        case \"business\" : return <BusinessIcon style={{ fontSize: 40 }}/>\n        default : return null;\n      }\n  }\n  const notificationAction = (e) => {\n        let actionType = e.currentTarget.name;\n        let  notificationid = e.currentTarget.getAttribute(\"notificationid\")\n        let param = {\n            DID: profileInfo.DID,\n            notificationid\n        }\n        dispatch(loader(true));\n        dispatch(actionOnNotification(actionType, param));\n  }\n  const showNotifications = () => {\n    return (notifications||[]).map((n)=>{\n        return(\n            <Grid\n              container\n              spacing={2}\n              alignItems={\"center\"}\n              key={n.requesterId}\n              className={\"notifications-border\"}\n            >\n                <Grid item xs={4} md={1}>\n                    <div className=\"image-container\">\n                        {setProfilePic(n.requesterType)}\n                    </div>\n                </Grid>\n                <Grid item xs={4} md={9}>\n                    <Grid\n                        container\n                        spacing={2}\n                        alignItems={\"center\"}\n                    >\n                        <Grid item xs={12} md={12}>\n                            <div className=\"requester-name\">\n                                {n.requesterName}\n                            </div>\n                        </Grid> \n                        <Grid item xs={12} md={12}>\n                            <div className=\"requester-info\">\n                                {n.requestedData && n.requestedData.message ? n.requestedData.message : \"\"}\n                            </div>\n                        </Grid> \n                        <Grid item xs={12} md={12}>\n                            <div className=\"requester-time\">\n                                {`Requested on: ${n.requestedTime}`} \n                            </div>\n                        </Grid> \n                    </Grid>\n                </Grid>\n                <Grid item xs={4} md={1}>\n                    <Button\n                        variant=\"contained\"\n                        className=\"full-width\"\n                        name=\"approve\"\n                        notificationid={n.requesterId}\n                        onClick={notificationAction}\n                    >\n                        APPROVE\n                    </Button>\n                </Grid>\n                <Grid item xs={4} md={1}>\n                    <Button\n                        variant=\"contained\"\n                        className=\"full-width\"\n                        name=\"reject\"\n                        notificationid={n.requesterId}\n                        onClick={notificationAction}\n                    >\n                        REJECT\n                    </Button>\n                </Grid>\n            </Grid>\n        )\n    })\n  }\n  return (\n    <React.Fragment>\n        {showLoader ? (\n        <div className={\"loader-parent\"}>\n            <div className={\"loader-container\"}>\n            <CircularProgress size={50} left={0} top={0} />\n            </div>\n        </div>\n        ) : null}\n        {errorMessage && <Alert severity=\"error\">{errorMessage}</Alert>}\n        <Card className=\"layout-card\">\n          <CardHeader title={\"Notifications\"}/>\n          <CardContent className=\"certificate-grid\">\n            {notifications === null || notifications.length === 0? \n            <div>No Notifications Available.</div>\n            :\n            showNotifications()}\n          </CardContent>\n        </Card>\n    </React.Fragment>\n  );\n};\n\nexport default Notifications;\n","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/actions/notificationActions.jsx",["154","155"],"import * as Actions from \".\";\nexport const getAllNotifications = (data) => {\n  return function (dispatch) {\n    let url = `/api/getAllNotifications/${data}`;\n    dispatch({\n      type: Actions.LOADER,\n      payload:false\n    })\n    let actionType = true;\n    if(actionType){\n      let notifications = [{\n            requestedData: {\n                message: \"Requesting for name.\",\n                param:[\"aadharNo\"]\n            },\n            requesterId:\"123\",\n            requesterName:\"Manipal Hospital\",\n            requestedTime:\"12/10/2020 10:10:00\",\n            requesterType:\"Medical\",\n        },\n        {\n            requestedData: {\n                message: \"Requesting for aadhar number.\",\n                param:[\"aadharNo\"]\n            },\n            requesterId:\"1234\",\n            requesterName:\"Manipal Hospital\",\n            requestedTime:\"12/10/2020 10:10:00\",\n            requesterType:\"Medical\",\n        },\n        {\n            requestedData: {\n                message: \"Requesting for registration number.\",\n                param:[\"registrationNo\"]\n            },\n            requesterId:\"12345\",\n            requesterName:\"KIIT University\",\n            requestedTime:\"05/10/2014 12:00:00\",\n            requesterType:\"School\",\n        },\n        {\n            requestedData: {\n                message: \"Requesting for employee id.\",\n                param:[\"employeeId\"]\n            },\n            requesterId:\"123456\",\n            requesterName:\"Tata Consultancy Services\",\n            requestedTime:\"10/15/2015 15:00:00\",\n            requesterType:\"Business\",\n        },\n        {\n            requestedData: {\n                message: \"Requesting for details of Joining date, Release date, Designation from previous company experience letter.\",\n                param:[\"joiningDate, releaseDate, designation\"]\n            },\n            requesterId:\"1234567\",\n            requesterName:\"Walmart\",\n            requestedTime:\"10/15/2015 15:00:00\",\n            requesterType:\"Business\",\n        },\n     ]\n      dispatch({\n          type: Actions.GET_ALL_NOTIFICATIONS,\n          payload: {\n              errorMessage:'',\n              notifications\n          }\n      });\n    }else{\n      dispatch({\n        type:  Actions.GET_ALL_NOTIFICATIONS,\n        payload: {\n          errorMessage:'Some error occured. Please try again later',\n          notifications:[]\n        }\n      });\n    }\n  }\n//   return async function (dispatch) {\n//     const response = await fetch(url, {\n//       method: \"GET\",\n//       notifications: \"include\",\n//     });\n//     dispatch({\n//       type: Actions.LOADER,\n//       payload:false\n//     })\n//     if (response.status === 200) {\n//         dispatch({\n//             type: Actions.GET_ALL_NOTIFICATIONS,\n//             payload: {\n//                 errorMessage:'',\n//                 notifications: data.notifications\n//             }\n//         });\n//     } else {\n//         dispatch({\n//             type:  Actions.GET_ALL_NOTIFICATIONS,\n//             payload: {\n//               errorMessage:'Some error occured. Please try again later',\n//               notifications:[]\n//             }\n//         });\n//     }\n//   };\n}\nexport const actionOnNotification = (type, data) => {\n    return function (dispatch) {\n      let url = `/api/actionOnNotification/${type}/${data}`;\n      let actionType = true;\n      if(actionType){\n        dispatch({\n            type: Actions.NOTIFICATION_ACTION,\n            payload: {\n                errorMessage:'',\n                notificationAction:true\n            }\n        });\n        dispatch(getAllNotifications(data.DID));\n      }else{\n        dispatch({\n          type:  Actions.NOTIFICATION_ACTION,\n          payload: {\n            errorMessage:'Some error occured. Please try again later',\n            notificationAction:false\n          }\n        });\n        dispatch({\n            type: Actions.LOADER,\n            payload:false\n        })\n      }\n    }\n  //   return async function (dispatch) {\n  //     const response = await fetch(url, {\n  //       method: \"GET\",\n  //       notifications: \"include\",\n  //     });\n  //     dispatch({\n  //       type: Actions.LOADER,\n  //       payload:false\n  //     })\n  //     if (response.status === 200) {\n            // dispatch({\n            //     type: Actions.GET_ALL_NOTIFICATIONS,\n            //     payload: {\n            //         errorMessage:'',\n            //         notificationAction:true\n            //     }\n            // });\n  //     } else {\n  //         dispatch({\n            //   type:  Actions.GET_ALL_NOTIFICATIONS,\n            //   payload: {\n            //     errorMessage:'Some error occured. Please try again later',\n            //     notificationAction:false\n            //   }\n    //      });\n  //     }\n  //   };\n  }","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/certificate.js",["156","157"],"/* eslint-disable complexity */\nimport React, { useEffect } from \"react\";\nimport Degree from './degree';\nimport Covid from './covid';\nimport Experience from './experience';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Alert } from \"@material-ui/lab\";\nimport {\n    loginUser,\n    loader\n  } from \"../actions/userAction\";\n  import {\n    getCertificateDetails\n  } from \"../actions/credentialAction\";\nconst Certificate = (props) => {\n    const dispatch = useDispatch();\n    const profileInfo = useSelector(\n        (state) => state.user.profileInfo\n    );\n    const errorMessage = useSelector(\n        (state) => state.credential.errorMessage\n    );\n    const fetchCertificateDetails = () => {\n        let param = {\n            DID: profileInfo.DID,\n            credentialId: props.match.params.id\n        }\n        dispatch(loader(true));\n        dispatch(getCertificateDetails(param, props.match.params.type));\n    }\n    const login = () => {\n        const username = localStorage.getItem(\"username\");\n        const password = localStorage.getItem(\"password\");\n        if(username && password && Object.keys(profileInfo).length === 0){\n            let param = {\n                username,\n                password,\n            };\n            dispatch(loader(true));\n            dispatch(loginUser(param , \"login\"));\n        }\n    }\n    useEffect(()=>{\n        if(Object.keys(profileInfo).length === 0){\n            login();\n        }else{\n            fetchCertificateDetails();\n        }\n    },[]);\n    useEffect(()=>{\n        if(Object.keys(profileInfo).length !== 0){\n            fetchCertificateDetails();\n        }\n    },[profileInfo]);\n    \n    const showCertificate = () => {\n        let type = (props.match.params.type||\"\").toLowerCase();\n        switch(type){\n                case \"medical\" : return <Covid/>;\n                case \"school\" : return <Degree/>;\n                case \"business\" : return <Experience/>;\n                default : return null;\n        }\n    }\n    return (\n      <React.Fragment>\n        {errorMessage && <Alert severity=\"error\">{errorMessage}</Alert>}\n        {showCertificate()}\n      </React.Fragment>\n    );\n};\n\nexport default Certificate;\n\n\n","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/experience.js",[],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/covid.js",[],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/degree.js",[],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/connections.js",["158","159","160","161"],"/* eslint-disable complexity */\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Alert } from \"@material-ui/lab\";\nimport {\n    Card,\n    CardHeader,\n    CardContent,\n    Grid,\n    CircularProgress,\n    Button\n} from \"@material-ui/core\";\nimport LocalHospitalIcon from '@material-ui/icons/LocalHospital';\nimport SchoolIcon from '@material-ui/icons/School';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport {\n  loginUser,\n  loader\n} from \"../actions/userAction\";\nimport {\n    getAllConnections,\n    verifyParticularConnection,\n    setConnectionMessage\n} from \"../actions/connectionAction\";\nconst Connections = (props) => {\n  const dispatch = useDispatch();\n  const profileInfo = useSelector(\n    (state) => state.user.profileInfo\n  );\n  const connections = useSelector(\n    (state) => state.connection.connections\n  );\n  const showLoader = useSelector(\n    (state) => state.user.loader\n  );\n  const errorMessage = useSelector(\n    (state) => state.connection.errorMessage\n  );\n  const connectionVerified = useSelector(\n    (state) => state.connection.connectionVerified\n  );\n  const login = () => {\n    const username = localStorage.getItem(\"username\");\n    const password = localStorage.getItem(\"password\");\n    if(username && password && Object.keys(profileInfo).length === 0){\n        let param = {\n            username,\n            password,\n        };\n        dispatch(loader(true));\n        dispatch(loginUser(param , \"login\"));\n    }\n  }\n  const fetchAllConnections = () => {\n    let param = profileInfo.DID;\n    dispatch(loader(true));\n    dispatch(getAllConnections(param));\n  }\n  const verifyConnection = (e) => {\n    let  connectionid = e.currentTarget.getAttribute(\"connectionid\");\n    let param = {\n        DID: profileInfo.DID,\n        connectionid\n    }\n    console.log(\"verifyConnection\",param);\n    dispatch(loader(true));\n    dispatch(verifyParticularConnection(param));\n  }\n  useEffect(()=>{\n    if(Object.keys(profileInfo).length === 0){\n        login();\n    }else{\n        fetchAllConnections();\n    }\n  },[]);\n  useEffect(()=>{\n    if(Object.keys(profileInfo).length !== 0){\n        fetchAllConnections();\n    }\n  },[profileInfo]);\n  useEffect(()=>{\n    if(errorMessage || connectionVerified!==null){\n        window.setTimeout(()=>{\n            dispatch(setConnectionMessage(null, \"\"));\n        },2000)\n    }\n  },[errorMessage, connectionVerified]);\n  const setProfilePic = (type) => {\n      type = type?.toLowerCase();\n      switch(type){\n        case \"medical\" : return <LocalHospitalIcon style={{ fontSize: 50 }}/>\n        case \"school\" : return <SchoolIcon style={{ fontSize: 50 }}/>\n        case \"business\" : return <BusinessIcon style={{ fontSize: 50 }}/>\n        default : return null;\n      }\n  }\n  const showconnections = () => {\n    return (connections||[]).map((c)=>{\n        return(\n            <Grid item xs={6} md={4} key={c.identity} >\n                <div className=\"certificate-container\">\n                <Grid\n                    container\n                    spacing={2}\n                    alignItems={\"center\"}\n                    >\n                    <Grid item xs={6} md={3}>\n                        <div className=\"image-container\">\n                            {setProfilePic(c.type)}\n                        </div>\n                    </Grid>\n                    <Grid item xs={6} md={9}>\n                        <div className=\"certificate-issuer\">\n                            {c.name}\n                        </div>\n                    </Grid>\n                    {!c.verify ?\n                        <Grid item xs={12} md={12}>\n                            <Button\n                                variant=\"contained\"\n                                className=\"full-width\"\n                                onClick={verifyConnection}\n                                connectionid={c.identity}\n                            >\n                                VERIFY\n                            </Button>\n                        </Grid>\n                    : \n                        <Grid item xs={12} md={12}>\n                            <Button\n                                variant=\"contained\"\n                                className=\"full-width\"\n                                className={\"verified-button\"}\n                            >\n                                VERIFIED\n                            </Button>\n                        </Grid> \n                    }\n                </Grid>\n                </div>\n            </Grid>\n        )\n    })\n  }\n  return (\n    <React.Fragment>\n        {showLoader ? (\n        <div className={\"loader-parent\"}>\n            <div className={\"loader-container\"}>\n            <CircularProgress size={50} left={0} top={0} />\n            </div>\n        </div>\n        ) : null}\n        {connectionVerified && <Alert severity=\"success\">Connection Verified Successfully</Alert>}\n        {errorMessage && <Alert severity=\"error\">{errorMessage}</Alert>}\n        <Card className=\"layout-card\">\n          <CardHeader title={\"Connections\"}/>\n          <CardContent className=\"certificate-grid\">\n          {connections === null || (connections||[]).length === 0? \n            <div>No connections Available.</div>\n            :\n            <Grid\n              container\n              spacing={2}\n              alignItems={\"center\"}\n              justify=\"center\"\n            >\n                {showconnections()}\n            </Grid>\n          }\n          </CardContent>\n        </Card>\n    </React.Fragment>\n  );\n};\n\nexport default Connections;\n","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/actions/connectionAction.js",["162","163"],"import * as Actions from \"../actions\";\nexport const getAllConnections = (data) => {\n  return function (dispatch) {\n    let url = `/api/getAllConnections/${data}`;\n    dispatch({\n      type: Actions.LOADER,\n      payload:false\n    })\n    let actionType = true;\n    let connections = [];\n    if(actionType){\n      let agentType = (localStorage.getItem(\"agentType\" || \"\")).toLowerCase();\n      if(agentType !== \"person\"){\n        connections = [{\n          identity: \"QWETVFF\",\n          name:\"Chesla\",\n          type:\"person\",\n          verify:true\n        },\n        {\n          identity: \"QWETSFF\",\n          name:\"Shubh\",\n          type:\"person\",\n          verify:false\n        },\n        {\n          identity: \"QWETVFFSD\",\n          name:\"Arun\",\n          type:\"person\",\n          verify:true\n        },\n        {\n          identity: \"QWETVFFSD\",\n          name:\"Pratap\",\n          type:\"person\",\n          verify:true\n        }  ]\n      }else{\n        connections = [{\n          identity: \"QWETVFF\",\n          name:\"Manipal Hospital\",\n          type:\"Medical\",\n          verify:true\n        },\n        {\n          identity: \"QWETSFF\",\n          name:\"KIIT University\",\n          type:\"School\",\n          verify:false\n        },\n        {\n          identity: \"QWETVFFSD\",\n          name:\"Tata Consultancy Services\",\n          type:\"Business\",\n          verify:true\n        } ]\n      }\n      \n      dispatch({\n          type: Actions.GET_ALL_CONNECTIONS,\n          payload: {\n              errorMessage:'',\n              connections\n          }\n      });\n    }else{\n      dispatch({\n        type:  Actions.GET_ALL_CONNECTIONS,\n        payload: {\n          errorMessage:'Some error occured. Please try again later',\n          connections:[]\n        }\n      });\n    }\n  }\n//   return async function (dispatch) {\n//     const response = await fetch(url, {\n//       method: \"GET\",\n//       certificates: \"include\",\n//     });\n//     dispatch({\n//       type: Actions.LOADER,\n//       payload:false\n//     })\n//     if (response.status === 200) {\n//         dispatch({\n//             type: Actions.GET_ALL_CONNECTIONS,\n//             payload: {\n//                 errorMessage:'',\n//                 connections: data.connections\n//             }\n//         });\n//     } else {\n//         dispatch({\n//             type:  Actions.GET_ALL_CONNECTIONS,\n//             payload: {\n//               errorMessage:'Some error occured. Please try again later',\n//               connections:[]\n//             }\n//         });\n//     }\n//   };\n}\n\nexport const verifyParticularConnection = (data) => {\n    return function (dispatch) {\n      let url = `/api/verifyConnection/${data}`;\n      dispatch({\n        type: Actions.LOADER,\n        payload:false\n      })\n      let actionType = true;\n      if(actionType){\n        dispatch({\n            type: Actions.VERIFY_CONNECTION,\n            payload: {\n                errorMessage:'',\n                connectionVerified:true\n            }\n        });\n      }else{\n        dispatch({\n          type:  Actions.VERIFY_CONNECTION,\n          payload: {\n            errorMessage:'Some error occured. Please try again later.',\n            connectionVerified:false\n          }\n        });\n      }\n    }\n  //   return async function (dispatch) {\n  //     const response = await fetch(url, {\n  //       method: \"GET\",\n  //       certificates: \"include\",\n  //     });\n  //     dispatch({\n  //       type: Actions.LOADER,\n  //       payload:false\n  //     })\n  //     if (response.status === 200) {\n  //         dispatch({\n  //             type: Actions.VERIFY_CONNECTION,\n  //             payload: {\n  //                 errorMessage:'',\n  //                 connections: data.connections\n  //             }\n  //         });\n  //     } else {\n  //         dispatch({\n  //             type:  Actions.VERIFY_CONNECTION,\n  //             payload: {\n  //               errorMessage:'Some error occured. Please try again later',\n  //               connections:[]\n  //             }\n  //         });\n  //     }\n  //   };\n  }\n\nexport const setConnectionMessage = (connectionVerified,errorMessage) => {\n    return {\n      type: Actions.SET_CONNECTION_MESSAGE,\n      payload:{\n        connectionVerified,\n        errorMessage\n      }\n    };\n}","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/reducers/connectionReducer.js",[],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/issueCredentials.js",["164","165"],"/* eslint-disable complexity */\nimport React, { useEffect, useState } from \"react\";\nimport DegreeForm from './degreeForm';\nimport CovidForm from './covidForm';\nimport ExperienceForm from './experienceForm';\nimport Degree from './degree';\nimport Covid from './covid';\nimport Experience from './experience';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Alert, Autocomplete } from \"@material-ui/lab\";\nimport {TextField,\n        Grid,\n        Dialog,\n        DialogContent,\n        DialogContentText,\n        DialogActions,\n        Button} from '@material-ui/core';\nimport {\n    loginUser,\n    loader\n} from \"../actions/userAction\";\nimport {\n    issueCredential,\n    initCredentialsDetails\n} from \"../actions/credentialAction\";\nimport {\n    getAllConnections\n} from \"../actions/connectionAction\";\nconst Certificate = (props) => {\n    const dispatch = useDispatch();\n    const profileInfo = useSelector(\n        (state) => state.user.profileInfo\n    );\n    const errorMessage = useSelector(\n        (state) => state.credential.errorMessage\n    );\n    const connections = useSelector(\n        (state) => state.connection.connections\n    );\n    const credentialIssued = useSelector(\n        (state) => state.credential.credentialIssued\n    );\n    const credentialIssuedAlready = useSelector(\n        (state) => state.credential.credentialIssuedAlready\n    );\n    const [showCredentialDialog, setShowCredentialDialog] = useState(false);\n    const [showCredentialDetails, setShowCredentialDetails] = useState(false);\n    const [connectionName, setConnectionName] = useState(\"\");\n    const [connectionInputValue, setConnectionInputValue] = useState(\"\");\n    const login = () => {\n        const username = localStorage.getItem(\"username\");\n        const password = localStorage.getItem(\"password\");\n        if(username && password && Object.keys(profileInfo).length === 0){\n            let param = {\n                username,\n                password,\n            };\n            dispatch(loader(true));\n            dispatch(loginUser(param , \"login\"));\n        }\n    }\n    const fetchAllConnections = () => {\n        let param = profileInfo.DID;\n        dispatch(loader(true));\n        dispatch(getAllConnections(param));\n    }\n    const showConnections = () => {\n        return (\n            <Autocomplete\n                value={connectionName}\n                onChange={(event, newValue) => {\n                    setConnectionName(newValue);\n                }}\n                inputValue={connectionInputValue}\n                onInputChange={(event, connectionInputValue) => {\n                    \n                    setConnectionInputValue(connectionInputValue);\n                }}\n                renderOption={(option) => (\n                    <React.Fragment>\n                      {option.name} ({option.identity})\n                    </React.Fragment>\n                )}\n                getOptionLabel={(option) => option.name||\"\"}\n                id=\"controllable-connection\"\n                options={connections||[]}\n                style={{ width: 300 }}\n                renderInput={(params) => <TextField {...params} label=\"Connection Name\" variant=\"outlined\" />}\n            />\n        )\n    }\n    useEffect(()=>{\n        if(Object.keys(profileInfo).length === 0){\n            login();\n        }else{\n            fetchAllConnections();\n        }\n        return () => {\n            dispatch(initCredentialsDetails());\n        };\n    },[]);\n    useEffect(()=>{\n        if(Object.keys(profileInfo).length !== 0){\n            fetchAllConnections();\n        }\n    },[profileInfo]);\n    useEffect(()=>{\n        setShowCredentialDialog(credentialIssuedAlready);\n    },[credentialIssuedAlready]);\n    const showCertificate = () => {\n        let type = (localStorage.getItem(\"agentType\" || \"\")).toLowerCase();\n        switch(type){\n                case \"medical\" : return <CovidForm\n                                            connectionName={connectionName.name}\n                                            profileName={profileInfo.firstLastName}\n                                            submitCredentialForm={((credentialParam)=>{\n                                                dispatch(loader(true));\n                                                dispatch(issueCredential(credentialParam, \"medical\"))\n                                            })}/>;\n                case \"school\" : return <DegreeForm \n                                            connectionName={connectionName.name}\n                                            profileName={profileInfo.firstLastName}\n                                            submitCredentialForm={((credentialParam)=>{\n                                                dispatch(loader(true));\n                                                dispatch(issueCredential(credentialParam, \"school\"))\n                                            })}/>;\n                case \"business\" : return <ExperienceForm\n                                            connectionName={connectionName.name}\n                                            profileName={profileInfo.firstLastName}\n                                            submitCredentialForm={((credentialParam)=>{\n                                                dispatch(loader(true));\n                                                dispatch(issueCredential(credentialParam, \"business\"))\n                                            })}/>;\n                default : return null;\n        }\n    }\n    const showIssuedCredentials = () => {\n        let type = (localStorage.getItem(\"agentType\" || \"\")).toLowerCase();\n        switch(type){\n                case \"medical\" : return <Covid/>;\n                case \"school\" : return <Degree/>;\n                case \"business\" : return <Experience/>;\n                default : return null;\n        }\n    }\n    return (\n      <div className=\"degree-grid-form\">\n        {errorMessage && <Alert severity=\"error\">{errorMessage}</Alert>}\n        {credentialIssued && <Alert severity=\"success\">Credential Issued Successfully</Alert>}\n        <Grid\n            container\n            justify=\"center\"\n            alignItems=\"center\"\n            className={\"issue-certificate-to-container\"}\n        >\n            <div style={{ paddingRight: 20 }}>\n                Issue certificate to:\n            </div>\n            {(connections||[]).length  ?\n                <div>{showConnections()}</div>\n                :\n                <div>\n                    There is no connection to issue credential.\n                </div>\n            }\n        </Grid>\n        {connectionName && connectionName.name ?\n            showCertificate()\n        :   null\n        }\n        <Dialog\n            open={showCredentialDialog||false}\n            onClose={() => setShowCredentialDialog(false)}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n        >\n            <DialogContent>\n                <DialogContentText id=\"alert-dialog-description\">\n                    {!showCredentialDetails ?\n                        <div>\n                            Credential already issued to this connection. Click on continue to see the issued credential.\n                        </div>\n                        :\n                        showIssuedCredentials()\n                    }\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button variant=\"contained\"\n                    onClick={() => {\n                        setShowCredentialDialog(false)\n                        setShowCredentialDetails(false);}\n                    }>\n                    {!showCredentialDetails ? \"Cancel\" : \"Close\" }\n                </Button>\n                {!showCredentialDetails ?\n                    <Button variant=\"contained\"\n                        onClick={()=>{\n                            setShowCredentialDetails(true);\n                        }}>\n                        Confirm\n                    </Button>\n                    :\n                    null\n                }\n                \n            </DialogActions>\n        </Dialog>\n      </div>\n    );\n};\n\nexport default Certificate;\n\n\n","/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/degreeForm.js",[],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/covidForm.js",[],"/Users/c0k0363/Documents/Projects/affirmatios-portal/src/components/experienceForm.js",["166"],"/* eslint-disable complexity */\nimport {\n    Card,\n    CardHeader,\n    CardContent,\n    Grid,\n    CardActions,\n    Button,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    FormHelperText,\n    TextField\n} from \"@material-ui/core\";\nimport React, {useState} from \"react\";\nimport { useSelector } from \"react-redux\";\nimport TCS from \"../images/tcslogo.png\";\nimport PropTypes from \"prop-types\";\n\nconst ExperienceForm = (props) => {\n    const [experienceParam ,setExperienceParam] = useState({\n        ownerName: props.profileName,\n        verificationId:\"\",\n        certificateName:\"\",\n        name:props.connectionName,\n        designation:\"\",\n        department:\"\",\n        doj:\"\",\n        dol:\"\",\n        gender:\"\",\n        reason:\"\",\n        remarks:\"\",\n        location:\"\",\n        issuedOn:\"\",\n        issuedBy:\"\",\n        issuedByTeam:\"\"\n    })\n    const [experienceParamError ,setExperienceParamError] = useState({\n        ownerName: false,\n        verificationId:false,\n        certificateName:false,\n        name:false,\n        designation:false,\n        department:false,\n        doj:false,\n        dol:false,\n        gender:false,\n        reason:false,\n        remarks:false,\n        location:false,\n        issuedOn:false,\n        issuedBy:false,\n        issuedByTeam:false\n    })\n    const setExperienceCredentials = (e) => {\n        setExperienceParam({ ...experienceParam, ...{ [e.target.name]: e.target.value } });\n    }\n    const issueCertificate = () => {\n        let param = {};\n        let passCheck = true;\n        for(let i in experienceParam){\n            if(!!experienceParam[i]){\n                param[i]= false;\n            }else{\n                passCheck = false;\n                param[i]= true;\n            }\n        }\n        setExperienceParamError(param);\n        if(passCheck){\n            console.log(\"experienceParam\",experienceParam);\n            props.submitCredentialForm(experienceParam);\n        }\n    }\n    return (\n        <React.Fragment>\n        <Card>\n          <CardHeader \n            title={<img src={TCS} className={\"office-logo\"} alt={props.profileName}/>}/>\n          <CardContent className=\"degree-grid-form\">\n            <Grid\n              container\n              spacing={2}\n              justify=\"flex-end\"\n              alignItems=\"center\"\n              style={{textAlign:\"right\"}}\n            >\n               <Grid item xs={6} md={4}>\n                    <TextField \n                        id=\"verificationId\" \n                        name=\"verificationId\"\n                        value={experienceParam.verificationId}\n                        onChange={setExperienceCredentials}\n                        placeholder={\"eg: TCS/EMP/834930\"}\n                        error={experienceParamError.verificationId}\n                        helperText={\n                            experienceParamError.verificationId ? \"Please enter employee no.\" : \"\"\n                        }/> \n               </Grid>\n            </Grid>\n            <Grid\n              container\n              spacing={2}\n              justify=\"center\"\n              alignItems=\"center\"\n            >\n               <Grid item xs={12} md={12}>\n               <Grid item xs={12} md={12} >\n                    <div className={\"degree-certificate-name\"}>\n                        <TextField \n                            id=\"certificateName\" \n                            name=\"certificateName\"\n                            onChange={setExperienceCredentials}\n                            value={experienceParam.certificateName}\n                            error={experienceParamError.certificateName}\n                            helperText={\n                                experienceParamError.certificateName ? \"Please enter certificate name.\" : \"\"\n                            }\n                            placeholder={\"eg: Service Certificate\"}/>\n                    </div>\n               </Grid>\n               </Grid>\n            </Grid>\n            <Grid\n              container\n              spacing={2}\n              justify=\"flex-start\"\n              alignItems=\"center\"\n              style={{textAlign:\"left\"}}\n            >\n               <Grid item xs={12} md={12}>\n                   This is to certify that <b>{props.connectionName}</b> was employed by us and \n                   <FormControl>\n                        <InputLabel id=\"demo-gender-label\">Gender</InputLabel>\n                            <Select\n                                labelId=\"demo-gender-label\"\n                                id=\"gender\"\n                                name=\"gender\"\n                                value={experienceParam.gender}\n                                onChange={setExperienceCredentials}\n                                >\n                                <MenuItem value={\"M\"}>Male</MenuItem>\n                                <MenuItem value={\"F\"}>Female</MenuItem>\n                            </Select>\n                    </FormControl>\n                   {experienceParamError.gender && <FormHelperText>Please select gender.</FormHelperText>}\n                   {experienceParam.gender===\"F\" ? \" her \" : \" his \"} \n                   particulars of service are as under:\n               </Grid>\n               <Grid item xs={12} md={12}>\n                    <Grid\n                        container\n                        spacing={2}\n                        justify=\"flex-start\"\n                        alignItems=\"center\"\n                        >\n                           <Grid item xs={6} md={4}>\n                               1. Name\n                            </Grid> \n                            <Grid item xs={6} md={8}>\n                                <b>{props.connectionName}</b>\n                            </Grid> \n                    </Grid>\n               </Grid>\n               <Grid item xs={12} md={12}>\n                    <Grid\n                        container\n                        spacing={2}\n                        justify=\"flex-start\"\n                        alignItems=\"center\"\n                        >\n                           <Grid item xs={6} md={4}>\n                               2. Designation\n                            </Grid> \n                            <Grid item xs={6} md={8}>\n                                <TextField \n                                    id=\"designation\" \n                                    name=\"designation\"\n                                    onChange={setExperienceCredentials}\n                                    value={experienceParam.designation}\n                                    error={experienceParamError.designation}\n                                    helperText={\n                                        experienceParamError.designation ? \"Please enter designation.\" : \"\"\n                                    }\n                                    placeholder={\"eg: CSIS\"}/>\n                            </Grid> \n                    </Grid>\n               </Grid>\n               <Grid item xs={12} md={12}>\n                    <Grid\n                        container\n                        spacing={2}\n                        justify=\"flex-start\"\n                        alignItems=\"center\"\n                        >\n                           <Grid item xs={6} md={4}>\n                               3. Department\n                            </Grid> \n                            <Grid item xs={6} md={8}>\n                                <TextField \n                                    id=\"department\" \n                                    name=\"department\"\n                                    onChange={setExperienceCredentials}\n                                    value={experienceParam.department}\n                                    error={experienceParamError.department}\n                                    helperText={\n                                        experienceParamError.department ? \"Please enter department name.\" : \"\"\n                                    }\n                                    placeholder={\"eg: CSIS\"}/>\n                            </Grid> \n                    </Grid>\n               </Grid>\n               <Grid item xs={12} md={12}>\n                    <Grid\n                        container\n                        spacing={2}\n                        justify=\"flex-start\"\n                        alignItems=\"center\"\n                        >\n                           <Grid item xs={6} md={4}>\n                               4. Date of Joining\n                            </Grid> \n                            <Grid item xs={6} md={8}>\n                                <TextField \n                                    id=\"doj\" \n                                    name=\"doj\"\n                                    onChange={setExperienceCredentials}\n                                    value={experienceParam.doj}\n                                    error={experienceParamError.doj}\n                                    helperText={\n                                        experienceParamError.doj ? \"Please enter date of joining.\" : \"\"\n                                    }\n                                    placeholder={\"eg: 06/16/2014\"}/>\n                            </Grid> \n                    </Grid>\n               </Grid>\n               <Grid item xs={12} md={12}>\n                    <Grid\n                        container\n                        spacing={2}\n                        justify=\"flex-start\"\n                        alignItems=\"center\"\n                        >\n                           <Grid item xs={6} md={4}>\n                               5. Date of Leaving\n                            </Grid> \n                            <Grid item xs={6} md={8}>\n                                <TextField \n                                    id=\"dol\" \n                                    name=\"dol\"\n                                    onChange={setExperienceCredentials}\n                                    value={experienceParam.dol}\n                                    error={experienceParamError.dol}\n                                    helperText={\n                                        experienceParamError.dol ? \"Please enter date of leaving.\" : \"\"\n                                    }\n                                    placeholder={\"eg: 09/11/2015\"}/>\n                            </Grid> \n                    </Grid>\n               </Grid>\n               <Grid item xs={12} md={12}>\n                    <Grid\n                        container\n                        spacing={2}\n                        justify=\"flex-start\"\n                        alignItems=\"center\"\n                        >\n                           <Grid item xs={6} md={4}>\n                               6. Reason of Leaving\n                            </Grid> \n                            <Grid item xs={6} md={8}>\n                                <TextField \n                                    id=\"reason\" \n                                    name=\"reason\"\n                                    onChange={setExperienceCredentials}\n                                    value={experienceParam.reason}\n                                    error={experienceParamError.reason}\n                                    helperText={\n                                        experienceParamError.reason ? \"Please enter reason.\" : \"\"\n                                    }\n                                    placeholder={\"eg: Resigned\"}/>\n                            </Grid> \n                    </Grid>\n               </Grid>\n               <Grid item xs={12} md={12}>\n                    <Grid\n                        container\n                        spacing={2}\n                        justify=\"flex-start\"\n                        alignItems=\"center\"\n                        >\n                           <Grid item xs={6} md={4}>\n                               7. Remarks\n                            </Grid> \n                            <Grid item xs={6} md={8}>\n                                <TextField \n                                    id=\"remarks\" \n                                    name=\"remarks\"\n                                    onChange={setExperienceCredentials}\n                                    value={experienceParam.remarks}\n                                    error={experienceParamError.remarks}\n                                    helperText={\n                                        experienceParamError.remarks ? \"Please enter remarks.\" : \"\"\n                                    }\n                                    placeholder={\"eg: Remarks\"}/>\n                            </Grid> \n                    </Grid>\n               </Grid>\n               <Grid item xs={12} md={12}>\n                    <Grid\n                        container\n                        spacing={2}\n                        justify=\"flex-start\"\n                        alignItems=\"center\"\n                    >\n                        <Grid item xs={6} md={4}>\n                            Dated\n                        </Grid> \n                        <Grid item xs={6} md={8}>\n                         <TextField \n                                id=\"issuedOn\" \n                                name=\"issuedOn\"\n                                value={experienceParam.issuedOn}\n                                onChange={setExperienceCredentials}\n                                placeholder={\"eg: 12/14/2020\"}\n                                error={experienceParamError.issuedOn}\n                                helperText={\n                                    experienceParamError.issuedOn ? \"Please enter issued on date.\" : \"\"\n                                }/>\n                    </Grid> \n                    </Grid>\n               </Grid>\n            </Grid>\n            <Grid\n              container\n              spacing={2}\n              justify=\"flex-end\"\n              alignItems=\"center\"\n              style={{textAlign:\"right\"}}\n            >\n               <Grid item xs={6} md={4}>\n                    <TextField \n                            id=\"issuedBy\" \n                            name=\"issuedBy\"\n                            value={experienceParam.issuedBy}\n                            onChange={setExperienceCredentials}\n                            placeholder={\"Issuer name\"}\n                            error={experienceParamError.issuedBy}\n                            helperText={\n                                experienceParamError.issuedBy ? \"Please enter issuer name.\" : \"\"\n                            }/>\n                </Grid>\n            </Grid>\n            <Grid\n              container\n              spacing={2}\n              justify=\"flex-end\"\n              alignItems=\"center\"\n              style={{textAlign:\"right\"}}\n            >\n                <Grid item xs={6} md={4}>\n                    <TextField \n                            id=\"issuedByTeam\" \n                            name=\"issuedByTeam\"\n                            value={experienceParam.issuedByTeam}\n                            onChange={setExperienceCredentials}\n                            placeholder={\"Issuer department\"}\n                            error={experienceParamError.issuedByTeam}\n                            helperText={\n                                experienceParamError.issuedByTeam ? \"Please enter issuer department.\" : \"\"\n                            }/>\n                </Grid>\n            </Grid>\n          </CardContent>\n          <CardActions>\n            <Button\n                variant=\"contained\"\n                className=\"full-width\"\n                onClick={issueCertificate}\n            >\n                Issue certificate\n            </Button>\n          </CardActions>\n        </Card>\n    </React.Fragment>\n    );\n};\n\nexport default ExperienceForm;\n\n\nExperienceForm.propTypes = {\n    connectionName: PropTypes.string,\n    profileName: PropTypes.string,\n    submitCredentialForm: PropTypes.func\n  };",{"ruleId":"167","replacedBy":"168"},{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","severity":1,"message":"172","line":6,"column":3,"nodeType":"173","messageId":"174","endLine":6,"endColumn":11},{"ruleId":"175","severity":1,"message":"176","line":89,"column":5,"nodeType":"177","endLine":89,"endColumn":19,"suggestions":"178"},{"ruleId":"175","severity":1,"message":"179","line":102,"column":5,"nodeType":"177","endLine":102,"endColumn":30,"suggestions":"180"},{"ruleId":"171","severity":1,"message":"181","line":4,"column":23,"nodeType":"173","messageId":"174","endLine":4,"endColumn":34},{"ruleId":"171","severity":1,"message":"182","line":7,"column":35,"nodeType":"173","messageId":"174","endLine":7,"endColumn":38},{"ruleId":"171","severity":1,"message":"183","line":7,"column":40,"nodeType":"173","messageId":"174","endLine":7,"endColumn":49},{"ruleId":"171","severity":1,"message":"184","line":15,"column":11,"nodeType":"173","messageId":"174","endLine":15,"endColumn":22},{"ruleId":"171","severity":1,"message":"185","line":8,"column":9,"nodeType":"173","messageId":"174","endLine":8,"endColumn":12},{"ruleId":"175","severity":1,"message":"186","line":45,"column":5,"nodeType":"177","endLine":45,"endColumn":7,"suggestions":"187"},{"ruleId":"175","severity":1,"message":"188","line":59,"column":5,"nodeType":"177","endLine":59,"endColumn":7,"suggestions":"189"},{"ruleId":"175","severity":1,"message":"190","line":64,"column":5,"nodeType":"177","endLine":64,"endColumn":18,"suggestions":"191"},{"ruleId":"171","severity":1,"message":"185","line":4,"column":9,"nodeType":"173","messageId":"174","endLine":4,"endColumn":12},{"ruleId":"171","severity":1,"message":"185","line":138,"column":9,"nodeType":"173","messageId":"174","endLine":138,"endColumn":12},{"ruleId":"171","severity":1,"message":"185","line":195,"column":9,"nodeType":"173","messageId":"174","endLine":195,"endColumn":12},{"ruleId":"175","severity":1,"message":"192","line":61,"column":5,"nodeType":"177","endLine":61,"endColumn":7,"suggestions":"193"},{"ruleId":"175","severity":1,"message":"194","line":66,"column":5,"nodeType":"177","endLine":66,"endColumn":18,"suggestions":"195"},{"ruleId":"171","severity":1,"message":"185","line":4,"column":9,"nodeType":"173","messageId":"174","endLine":4,"endColumn":12},{"ruleId":"171","severity":1,"message":"185","line":109,"column":11,"nodeType":"173","messageId":"174","endLine":109,"endColumn":14},{"ruleId":"175","severity":1,"message":"196","line":49,"column":7,"nodeType":"177","endLine":49,"endColumn":9,"suggestions":"197"},{"ruleId":"175","severity":1,"message":"198","line":54,"column":7,"nodeType":"177","endLine":54,"endColumn":20,"suggestions":"199"},{"ruleId":"175","severity":1,"message":"200","line":75,"column":5,"nodeType":"177","endLine":75,"endColumn":7,"suggestions":"201"},{"ruleId":"175","severity":1,"message":"202","line":80,"column":5,"nodeType":"177","endLine":80,"endColumn":18,"suggestions":"203"},{"ruleId":"175","severity":1,"message":"179","line":87,"column":5,"nodeType":"177","endLine":87,"endColumn":39,"suggestions":"204"},{"ruleId":"205","severity":1,"message":"206","line":133,"column":33,"nodeType":"207","endLine":133,"endColumn":62},{"ruleId":"171","severity":1,"message":"185","line":4,"column":9,"nodeType":"173","messageId":"174","endLine":4,"endColumn":12},{"ruleId":"171","severity":1,"message":"185","line":107,"column":11,"nodeType":"173","messageId":"174","endLine":107,"endColumn":14},{"ruleId":"175","severity":1,"message":"208","line":101,"column":7,"nodeType":"177","endLine":101,"endColumn":9,"suggestions":"209"},{"ruleId":"175","severity":1,"message":"202","line":106,"column":7,"nodeType":"177","endLine":106,"endColumn":20,"suggestions":"210"},{"ruleId":"171","severity":1,"message":"211","line":17,"column":10,"nodeType":"173","messageId":"174","endLine":17,"endColumn":21},"no-native-reassign",["212"],"no-negated-in-lhs",["213"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.","ArrayExpression",["214"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["215"],"'useDispatch' is defined but never used.","'Box' is defined but never used.","'Container' is defined but never used.","'profileInfo' is assigned a value but never used.","'url' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'login' and 'profileInfo'. Either include them or remove the dependency array.",["216"],"React Hook useEffect has missing dependencies: 'fetchAllCredentials', 'login', and 'profileInfo'. Either include them or remove the dependency array.",["217"],"React Hook useEffect has a missing dependency: 'fetchAllCredentials'. Either include it or remove the dependency array.",["218"],"React Hook useEffect has missing dependencies: 'fetchAllNotifications', 'login', and 'profileInfo'. Either include them or remove the dependency array.",["219"],"React Hook useEffect has a missing dependency: 'fetchAllNotifications'. Either include it or remove the dependency array.",["220"],"React Hook useEffect has missing dependencies: 'fetchCertificateDetails', 'login', and 'profileInfo'. Either include them or remove the dependency array.",["221"],"React Hook useEffect has a missing dependency: 'fetchCertificateDetails'. Either include it or remove the dependency array.",["222"],"React Hook useEffect has missing dependencies: 'fetchAllConnections', 'login', and 'profileInfo'. Either include them or remove the dependency array.",["223"],"React Hook useEffect has a missing dependency: 'fetchAllConnections'. Either include it or remove the dependency array.",["224"],["225"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","React Hook useEffect has missing dependencies: 'dispatch', 'fetchAllConnections', 'login', and 'profileInfo'. Either include them or remove the dependency array.",["226"],["227"],"'useSelector' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"228","fix":"229"},{"desc":"230","fix":"231"},{"desc":"232","fix":"233"},{"desc":"234","fix":"235"},{"desc":"236","fix":"237"},{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},{"desc":"242","fix":"243"},{"desc":"244","fix":"245"},{"desc":"246","fix":"247"},{"desc":"248","fix":"249"},{"desc":"250","fix":"251"},{"desc":"252","fix":"253"},{"desc":"248","fix":"254"},"Update the dependencies array to be: [loginSuccess, props.history]",{"range":"255","text":"256"},"Update the dependencies array to be: [dispatch, props.location.pathname]",{"range":"257","text":"258"},"Update the dependencies array to be: [login, profileInfo]",{"range":"259","text":"260"},"Update the dependencies array to be: [fetchAllCredentials, login, profileInfo]",{"range":"261","text":"262"},"Update the dependencies array to be: [fetchAllCredentials, profileInfo]",{"range":"263","text":"264"},"Update the dependencies array to be: [fetchAllNotifications, login, profileInfo]",{"range":"265","text":"266"},"Update the dependencies array to be: [fetchAllNotifications, profileInfo]",{"range":"267","text":"268"},"Update the dependencies array to be: [fetchCertificateDetails, login, profileInfo]",{"range":"269","text":"270"},"Update the dependencies array to be: [fetchCertificateDetails, profileInfo]",{"range":"271","text":"272"},"Update the dependencies array to be: [fetchAllConnections, login, profileInfo]",{"range":"273","text":"274"},"Update the dependencies array to be: [fetchAllConnections, profileInfo]",{"range":"275","text":"276"},"Update the dependencies array to be: [errorMessage, connectionVerified, dispatch]",{"range":"277","text":"278"},"Update the dependencies array to be: [dispatch, fetchAllConnections, login, profileInfo]",{"range":"279","text":"280"},{"range":"281","text":"276"},[2639,2653],"[loginSuccess, props.history]",[2892,2917],"[dispatch, props.location.pathname]",[1274,1276],"[login, profileInfo]",[1626,1628],"[fetchAllCredentials, login, profileInfo]",[1737,1750],"[fetchAllCredentials, profileInfo]",[1683,1685],"[fetchAllNotifications, login, profileInfo]",[1796,1809],"[fetchAllNotifications, profileInfo]",[1511,1513],"[fetchCertificateDetails, login, profileInfo]",[1642,1655],"[fetchCertificateDetails, profileInfo]",[2096,2098],"[fetchAllConnections, login, profileInfo]",[2207,2220],"[fetchAllConnections, profileInfo]",[2404,2438],"[errorMessage, connectionVerified, dispatch]",[3458,3460],"[dispatch, fetchAllConnections, login, profileInfo]",[3585,3598]]